#!/bin/bash
# shellcheck disable=SC1090,SC2015,SC2034,SC2119,SC2120,SC2162

set -euo pipefail

function is_virtual() {
    lk_is_virtual
}

function is_qemu() {
    lk_is_qemu
}

function is_desktop() {
    ! lk_is_portable
}

function is_lid_closed() {
    lk_is_lid_closed
}

function assert_is_macos() {
    lk_is_macos || lk_die "macOS required"
}

function is_macos() {
    lk_is_macos
}

function assert_is_windows() {
    lk_is_wsl || lk_die "Windows required"
}

function is_windows() {
    lk_is_wsl
}

function assert_is_linux() {
    lk_is_linux || lk_die "Linux required"
}

function is_linux() {
    lk_is_linux
}

function assert_is_ubuntu() {
    lk_is_ubuntu || lk_die "Ubuntu required"
}

function is_ubuntu() {
    lk_is_ubuntu
}

function assert_is_desktop() {
    lk_is_macos || lk_command_exists X || lk_die "desktop required"
}

function assert_is_server() {
    ! { lk_is_macos || lk_command_exists X; } || lk_die "server required"
}

function assert_is_ubuntu_lts() {
    lk_is_ubuntu_lts || lk_die "Ubuntu LTS required"
}

function is_ubuntu_lts() {
    lk_is_ubuntu_lts
}

function assert_root() {
    lk_is_root || lk_die "not running as superuser"
}

function assert_not_root() {
    ! lk_is_root || lk_die "running as superuser"
}

function assert_command_exists() {
    lk_command_exists "$@" || lk_die "$*: $(lk_maybe_plural "$#" "command" "one or more commands") not found"
}

function assert_variable_exists() {
    variable_exists "$1" || lk_die "$1: variable not defined"
}

function is_root() {
    lk_is_root
}

function filename_add_suffix() {
    lk_add_file_suffix "$@"
}

function filename_get_next_backup() {
    lk_next_backup_file "$@"
}

function is_pdf() {
    lk_is_pdf "$@"
}

function are_directories() {
    lk_dirs_exist "$@"
}

function are_files() {
    lk_files_exist "$@"
}

function command_exists() {
    lk_command_exists "$@"
}

function variable_exists() {
    lk_is_identifier "$1" && lk_variable_declared "$1"
}

function user_exists() {
    lk_users_exist "$1"
}

function echoc() {
    lk_echoc "$@"
}

function die() {
    lk_die "$@"
}

function die_happy() {
    LK_DIE_HAPPY=1 lk_die "$@"
}

function version_at_least() {
    lk_version_at_least "$@"
}

function pause() {
    lk_pause "$@"
}

function get_value() {
    lk_console_read "$@"
}

function get_confirmation() {
    lk_confirm "$@"
}

# file_to_array file_path [filter_pattern...]
function file_to_array() {
    local FILENAME="$1" EXCLUDE=()
    [ -e "$FILENAME" ] ||
        FILENAME="$FILENAME-default"
    [ -e "$FILENAME" ] || lk_warn "file not found: $1" || return
    shift
    [ "$#" -eq "0" ] &&
        EXCLUDE=('^\s*$' '^[#;]') || {
        [ -z "$1" ] ||
            EXCLUDE=("$@")
    }
    FILE_TO_ARRAY_FILENAME="$FILENAME"
    lk_mapfile "$FILENAME" "FILE_TO_ARRAY" ${EXCLUDE[@]+"($(lk_implode ")|(" "${EXCLUDE[@]}"))"}
}

function single_or_plural() {
    lk_maybe_plural "$@"
}

function upper_first() {
    lk_upper_first "$@"
}

function lower() {
    lk_lower "$@"
}

function upper() {
    lk_upper "$@"
}

function array_search() {
    lk_array_search "$@"
}

function in_array() {
    lk_in_array "$@"
}

function array_join_by() {
    lk_implode "$@"
}

function has_arg() {
    lk_in_array "$1" LK_ARGV
}

function is_autostart() {
    has_arg "--autostart"
}

function offer_sudo_password_bypass() {
    local CHECK_FILENAME FILENAME
    lk_user_in_group "$USER" admin sudo wheel || return
    CHECK_FILENAME="$CACHE_DIR/.nopasswd-$USER"
    FILENAME="/etc/sudoers.d/nopasswd-$USER"
    [ ! -e "$CHECK_FILENAME" ] || ! sudo -n test -e "$FILENAME" 2>/dev/null || return 0
    sudo -n true 2>/dev/null || lk_console_message "Please enter your computer password if requested"
    sudo true || return
    sudo test -e "$FILENAME" ||
        ! lk_confirm "Allow user $USER to skip future password prompts from sudo?" Y || {
        sudo tee "$FILENAME" >/dev/null <<<"$USER ALL=(ALL) NOPASSWD:ALL" &&
            sudo chmod 440 "$FILENAME" &&
            lk_console_message "Password bypass enabled for $USER"
    } || return
    touch "$CHECK_FILENAME" 2>/dev/null || sudo touch "$CHECK_FILENAME" 2>/dev/null || true
}

function sed_escape_search() {
    lk_escape_ere "$1"
}

function sed_escape_replace() {
    lk_escape_ere_replace "$1"
}

function search_replace() {
    lk_replace "$@"
}

function date_get_log() {
    lk_date_log
}

function date_get_log_nano() {
    lk_date_log_nano
}

function date_get_ymdhms() {
    lk_date_ymdhms
}

function date_get_timestamp() {
    lk_timestamp
}

function url_decode() {
    lk_decode_uri "$@"
}

function get_urls_from_url() {
    local URLS
    if [ -z "${2:-}" ]; then
        lk_wget_uris "$1"
    else
        URLS="$(lk_wget_uris "$1")" || return
        grep -E "$2" <<<"$URLS" || true
    fi
}

# files are downloaded to the current directory, and local filenames are output
function download_urls() {
    lk_download "$@"
}

# get_log_file [suffix]
#   Outputs the path to a writable log file based on the name of the
#   running script and the current user's effective ID.
#
function get_log_file() {

    local LOG_ROOTS LOG_ROOT LOG_BASENAME LOG_PATH

    LOG_ROOTS=(
        "$LOG_DIR"
        ~/.local/var/log
        ~
        /tmp
    )

    LOG_BASENAME="$(basename "$0")${1:-}.$EUID.log"

    for LOG_ROOT in "${LOG_ROOTS[@]}"; do

        [ -d "$LOG_ROOT" ] ||
            { [ ! -e "$LOG_ROOT" ] && mkdir -p "$LOG_ROOT" 2>/dev/null; } ||
            continue

        [ -w "$LOG_ROOT" ] || continue

        LOG_PATH="$LOG_ROOT/$LOG_BASENAME"

        [ -f "$LOG_PATH" ] || [ ! -e "$LOG_PATH" ] || continue

        touch "$LOG_PATH" 2>/dev/null || continue

        echo "$LOG_PATH"
        return

    done

    die "No writable log file location"

}

function time_command() {

    local EXIT_CODE=0

    exec 8>&1 9>&2 || die
    COMMAND_TIME="$(
        TIMEFORMAT="${TIMEFORMAT:-%3lR}"
        { time "$@" 1>&8 2>&9; } 2>&1
    )" || EXIT_CODE="$?"
    exec 8>&- 9>&-

    return "$EXIT_CODE"

}

function maybe_sudo() {
    lk_maybe_sudo "$@"
}

function safe_symlink() {
    lk_safe_symlink "$@"
}

# Usage: safe_sed /path/to/file sed_command1 [sed_command2...]
function safe_sed() {

    local FILENAME COMMAND COMMANDS=() CHANGED

    FILENAME="$1" || die
    shift

    [ -f "$FILENAME" ] || die "File doesn't exist: $FILENAME"

    for COMMAND in "$@"; do

        COMMANDS+=(-e "$COMMAND")

    done

    CHANGED="$(gnu_sed -E "${COMMANDS[@]}" "$FILENAME")" || die

    if ! diff -q ".git/config" <(printf '%s' "$CHANGED") >/dev/null; then

        printf '%s' "$CHANGED" >"$FILENAME" || die

    fi

}

function is_dryrun() {

    [ "$ORIGINAL_DRYRUN_ARGUMENT" = "--dryrun" ] || { [ "${DRYRUN_BY_DEFAULT:-N}" != "N" ] && [ "$ORIGINAL_DRYRUN_ARGUMENT" != "--run" ]; }

}

function dryrun_message() {

    local EXTRA=

    if is_dryrun; then

        [ "${DRYRUN_BY_DEFAULT:-N}" = "N" ] || EXTRA=" (use \"--run\" as the first argument to override)"

        lk_console_message "$(basename "$0") is in dry run mode${EXTRA}" "$BOLD$RED" >&2

    fi

}

# Usage: maybe_dryrun command [argument1...]
function maybe_dryrun() {

    if is_dryrun; then

        lk_console_item "Command skipped (dry run):" "$*" "$YELLOW" >&2

    else

        "$@"

    fi

}

function create_temp_file() {
    lk_mktemp_file
}

function create_temp_dir() {
    lk_mktemp_dir
}

function create_temp_fifo() {
    lk_mktemp_fifo
}

function flush_fifo() {

    dd if="$1" iflag=nonblock of=/dev/null

}

function get_x_displays() {

    assert_is_desktop

    local X

    if [ -d /tmp/.X11-unix ]; then

        for X in /tmp/.X11-unix/X*; do

            echo ":${X##*X}"

        done

    fi

}

function dir_make_and_own() {

    assert_not_root

    [ -d "$1" ] || sudo mkdir -p "$1" || die

    [ -w "$1" ] || sudo chown "$(id -un):$(id -gn)" "$1" || die

}

function windows_running_as_administrator() {

    assert_command_exists whoami.exe

    whoami.exe /groups | grep '\bS-1-5-32-544\b.*\bEnabled group\b' >/dev/null

}

# because Bash 3.2 exits when eval exits non-zero, regardless of context or errexit status
function eval_test() {

    local EXIT_CODE

    EXIT_CODE="$(eval 'if' "$@" '; then echo "0"; else echo "1"; fi')"

    return "$EXIT_CODE"

}

function array_filter_platform() {

    printf '%s\n' "$@" | gnu_grep -Po "^[^:]+(?=(:([^:|]+\|)*$PLATFORM(\|[^:|]+)*)?\$)" || true

}

# Usage: install_or_queue "Description of this group" "item1 item2 ..." <allow user override? (y/n)> <singular noun> <plural noun> <name of "installed items" array> <name of "available items" array> <name of "to install" array to fill> [name of "already installed" array to fill]
function install_or_queue() {

    local REQUESTED=($2) UI="$3" SINGLE="$4" PLURAL="$5" ITEMS_INSTALLED ITEMS_AVAILABLE INSTALL_TARGET="$8" ALREADY_INSTALLED_TARGET="${9:-}"

    lk_console_message "Checking ${BOLD}${1}${RESET} $PLURAL"

    local i=6 j k
    for j in ITEMS_INSTALLED ITEMS_AVAILABLE; do

        # k="$6"
        eval 'k="$'"$i"'"'

        if [ -z "$k" ]; then

            eval "$j"'=()'

        elif variable_exists "$k"; then

            # ITEMS_INSTALLED=($(printf '%s\n' "${NAME_OF_ARRAY[@]}" | sort | uniq))
            eval "$j"'=($(printf '"'"'%s\n'"'"' "${'"$k"'[@]}" | sort | uniq))'

        else

            # ITEMS_INSTALLED=($(COMMAND | sort | uniq)) || true
            eval "$j"'=($('"$k"' | sort | uniq)) || true'

        fi

        ((i += 1))

    done

    local IOQ_INSTALL IOQ_UNAVAILABLE IOQ_ALREADY_INSTALLED

    IOQ_INSTALL=($(comm -23 <(printf '%s\n' "${REQUESTED[@]}" | sort | uniq) <([ "${#ITEMS_INSTALLED[@]}" -gt "0" ] && printf '%s\n' "${ITEMS_INSTALLED[@]}" || true)))
    IOQ_ALREADY_INSTALLED=($(comm -12 <(printf '%s\n' "${REQUESTED[@]}" | sort | uniq) <([ "${#ITEMS_INSTALLED[@]}" -gt "0" ] && printf '%s\n' "${ITEMS_INSTALLED[@]}" || true)))

    if [ "${#IOQ_ALREADY_INSTALLED[@]}" -gt "0" ] && [ -n "$ALREADY_INSTALLED_TARGET" ]; then

        eval "$ALREADY_INSTALLED_TARGET"'+=("${IOQ_ALREADY_INSTALLED[@]}")'

    fi

    if [ "${#IOQ_INSTALL[@]}" -gt "0" ]; then

        if [ "${#ITEMS_AVAILABLE[@]}" -gt "0" ]; then

            IOQ_UNAVAILABLE=($(comm -23 <(printf '%s\n' "${IOQ_INSTALL[@]}" | sort | uniq) <(printf '%s\n' "${ITEMS_AVAILABLE[@]}")))

            if [ "${#IOQ_UNAVAILABLE[@]}" -gt "0" ]; then

                lk_echo_array "${IOQ_UNAVAILABLE[@]}" | lk_console_list "${#IOQ_UNAVAILABLE[@]} $(single_or_plural "${#IOQ_UNAVAILABLE[@]}" "$SINGLE" "$PLURAL") unavailable for installation:" "$BOLD$RED"

                IOQ_INSTALL=($(comm -12 <(printf '%s\n' "${IOQ_INSTALL[@]}" | sort | uniq) <(printf '%s\n' "${ITEMS_AVAILABLE[@]}")))

                [ "${#IOQ_INSTALL[@]}" -gt "0" ] || return 0

            fi

        fi

        if [ "$UI" = "Y" ]; then

            lk_echo_array "${IOQ_INSTALL[@]}" | lk_console_list "Missing ${#IOQ_INSTALL[@]} $1 $(single_or_plural "${#IOQ_INSTALL[@]}" "$SINGLE" "$PLURAL"):" "$BOLD$MAGENTA"

            get_confirmation "Add the $1 $(single_or_plural "${#IOQ_INSTALL[@]}" "$SINGLE" "$PLURAL") listed above?" Y Y || return 0

        else

            lk_echo_array "${IOQ_INSTALL[@]}" | lk_console_list "Adding ${#IOQ_INSTALL[@]} $1 $(single_or_plural "${#IOQ_INSTALL[@]}" "$SINGLE" "$PLURAL"):" "$GREEN"

        fi

        if variable_exists "$INSTALL_TARGET"; then

            eval "$INSTALL_TARGET"'+=("${IOQ_INSTALL[@]}")'

        else

            # shellcheck disable=SC2086
            eval $INSTALL_TARGET "${IOQ_INSTALL[@]}"

        fi

    fi

}

# Usage: test_host_port my.host.address port-number
function test_host_port() {

    # 1-second timeout -- intended for LAN service availability checks
    gnu_nc -zw 1 "$1" "$2" >/dev/null 2>&1

}

# outputs the installed memory size in MiB
function get_memory_size() {

    local MEMSIZE

    if is_linux; then

        assert_command_exists dmidecode

        sudo dmidecode -t memory | sed -E 's/^\s+(.*)$/\1/' | gnu_grep -Po '(?<=^Size: )[0-9]+(?= MB$)' | awk '{ram+=$1} END {print ram}' || die

    elif is_macos; then

        MEMSIZE="$(sysctl -n hw.memsize)" || die
        echo "$((MEMSIZE / 1024 ** 2))"

    else

        die "Unable to determine memory size on this platform"

    fi
}

function lk_set_root() {
    local SCRIPT_PATH ROOT_DIR
    SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}" 2>/dev/null)" || SCRIPT_PATH="$(python -c 'import os,sys;print os.path.realpath(sys.argv[1])' "${BASH_SOURCE[0]}")"
    ROOT_DIR="$(dirname "$SCRIPT_PATH")/.."
    LK_ROOT="$(realpath "$ROOT_DIR" 2>/dev/null)" || LK_ROOT="$(python -c 'import os,sys;print os.path.realpath(sys.argv[1])' "$ROOT_DIR")"
}

lk_set_root

. "$LK_ROOT/bash/common-functions"
lk_is_server || . "$LK_ROOT/bash/common-desktop"

lk_trap_err

CONFIG_DIR="$LK_ROOT/etc"
CACHE_DIR="$LK_ROOT/var/cache"
LOG_DIR="$LK_ROOT/var/log"
TEMP_DIR="$LK_ROOT/tmp"

FONTPATH=

shopt -s expand_aliases
alias pop_return1='{ popd >/dev/null; return 1; }'

ORIGINAL_DRYRUN_ARGUMENT=

if [[ "${1:-}" =~ --(dry)?run ]]; then

    ORIGINAL_DRYRUN_ARGUMENT="$1"
    shift

fi

LK_ARGV=("$@")

mkdir -p "$CACHE_DIR" "$LOG_DIR" "$TEMP_DIR"

eval "$(lk_get_colours '')"

if lk_is_macos; then
    PLATFORM=mac
    FONTPATH="${HOME:+$HOME/Library/Fonts:}/Library/Fonts"
    . "$LK_ROOT/bash/common-macos"
elif lk_is_linux; then
    if lk_is_wsl; then
        PLATFORM=wsl
        FONTPATH="/mnt/c/Windows/Fonts:${HOME:+$HOME/.local/share/fonts:}/usr/share/fonts"
    else
        PLATFORM=linux
        FONTPATH="${HOME:+$HOME/.local/share/fonts:}/usr/share/fonts"
    fi
    [ -f /etc/lsb-release ] && . /etc/lsb-release
    . "$LK_ROOT/bash/common-linux"
else
    die "unknown platform"
fi

[ ! -e "$CONFIG_DIR/settings" ] || . "$CONFIG_DIR/settings"
