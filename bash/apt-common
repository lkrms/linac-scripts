assert_apt_available

function apt_refresh_packages() {

    APT_INSTALLED_PACKAGES="$(dpkg-query -f '${binary:Package}\n' -W)"
    APT_AVAILABLE_PACKAGES="$(apt-cache pkgnames)"
    APT_GUI_PACKAGES="$(
        set -euo pipefail
        apt-cache rdepends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances x11-common libx11-6 | grep -Ev " " | sort | uniq
    )"

}

function apt_package_installed() {

    apt_make_cache_clean
    echo "$APT_INSTALLED_PACKAGES" | grep -E "^$1"'(:.*)?$' &>/dev/null

}

function apt_package_available() {

    apt_make_cache_clean
    echo "$APT_AVAILABLE_PACKAGES" | grep -E "^$1"'(:.*)?$' &>/dev/null

}

function apt_package_is_gui() {

    apt_make_cache_clean
    apt_package_available "$1" && echo "$APT_GUI_PACKAGES" | grep -E "^$1"'(:.*)?$' &>/dev/null

}

function apt_package_is_cli() {

    apt_package_available "$1" && ! apt_package_is_gui "$1"

}

# Removes duplicates and suppressed packages.
# Usage: apt_filter_packages "package1 package2 package3-" [include removed? (Y/N)]
function apt_filter_packages() {

    local PACKAGES=($1) INCLUDE_REMOVED="${2:-Y}" FILTERED=() p

    PACKAGES=($(printf '%s\n' "${PACKAGES[@]}" | sort | uniq))

    for p in "${PACKAGES[@]}"; do

        if [ "${p:(-1)}" = "-" ]; then

            [ "$INCLUDE_REMOVED" = "Y" ] || continue

            # don't display at all if just a suppression
            apt_package_installed "${p::(-1)}" || continue

        fi

        FILTERED+=("$p")

    done

    echo "${FILTERED[*]}"

}

# Underlines "gui" packages, and colours packages being removed red. Doesn't re-flow text.
# Usage: apt_pretty_packages "package1 package2 package3-" [$BLUE ...]
function apt_pretty_packages() {

    local PACKAGES=($1) FORMATTED="$1" COLOUR_RESET="${RESET}" p q s r

    [ "$#" -gt "1" ] && {
        shift
        COLOUR_RESET="$(printf '%s' "$@")"
    }

    for p in "${PACKAGES[@]}"; do

        s="$(sed_escape_search "$p")"
        q="$p"

        if [ "${p:(-1)}" = "-" ]; then

            p="${p::(-1)}"
            q="${BOLD}${RED}${p} "

        fi

        apt_package_is_gui "$p" && q="${UNDERLINE}${q}${NO_UNDERLINE}"
        q="${q}${COLOUR_RESET}"

        r="$(sed_escape_replace "$q")"
        FORMATTED="$(echo "$FORMATTED" | sed -E 's/(\s|^)'"$s"'(\s|$)/\1'"$r"'\2/g')"

    done

    echo "${FORMATTED[*]}"

}

function apt_ubuntu_archive_url() {

    # attempt to identify a local archive URL
    if [ -z "${UBUNTU_ARCHIVE_URL:-}" ]; then

        UBUNTU_ARCHIVE_URL="$(
            set -euo pipefail
            grep -Eo '\bhttps?://([[:alnum:]]+\.)archive\.ubuntu\.com/ubuntu\b' /etc/apt/sources.list | head -n1
        )/" || UBUNTU_ARCHIVE_URL="http://archive.ubuntu.com/ubuntu/"

    fi

    echo "$UBUNTU_ARCHIVE_URL"

}

function do_apt_enable_ubuntu_repository() {

    if ! cat /etc/apt/sources.list | grep -E '^deb[[:space:]]+https?://([[:alnum:]]+\.)?archive\.ubuntu\.com/ubuntu/?[[:space:]]+'"$1"'[[:space:]]+.*\b'"$2"'\b' &>/dev/null; then

        command -v add-apt-repository &>/dev/null || apt_force_install_packages "software-properties-common"

        sudo add-apt-repository -yn "deb $(apt_ubuntu_archive_url) $1 $2"

        APT_CACHE_DIRTY=1

    fi

}

function apt_enable_ubuntu_repository() {

    assert_is_ubuntu

    do_apt_enable_ubuntu_repository "$DISTRIB_CODENAME" "$1"

    local suffix

    [ -n "${2:-}" ] && for suffix in $2; do

        do_apt_enable_ubuntu_repository "${DISTRIB_CODENAME}-${suffix}" "$1"

    done

}

function apt_enable_partner_repository() {

    assert_is_ubuntu

    if ! cat /etc/apt/sources.list | grep -E '^deb[[:space:]]+https?://([[:alnum:]]+\.)?archive\.canonical\.com/ubuntu/?[[:space:]]+'"$DISTRIB_CODENAME"'[[:space:]]+.*\bpartner\b' &>/dev/null; then

        command -v add-apt-repository &>/dev/null || apt_force_install_packages "software-properties-common"

        sudo add-apt-repository -yn "deb http://archive.canonical.com/ubuntu $DISTRIB_CODENAME partner"

        APT_CACHE_DIRTY=1

    fi

}

# Usage: apt_register_ppa "the/ppa" "package1 package2 ..." [add immediately (Y/N)]
function apt_register_ppa() {

    command -v add-apt-repository &>/dev/null || apt_force_install_packages "software-properties-common"

    local p

    if ! cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list 2>/dev/null | grep "^[^#]*/$1" &>/dev/null; then

        for p in $2; do

            # without BASH 4+, we have to kludge our associative arrays
            APT_PPA_REGISTRY+=("$1")
            APT_PPA_PACKAGES+=("$p")

        done

        if [ "${3:-N}" = "Y" ]; then

            apt_add_ppa "$1"

        fi

    fi

}

function apt_add_key_from_url() {

    wget -qO - "$1" | sudo apt-key add - &>/dev/null

}

# Usage: apt_register_repository my-repo-identifier "https://gpg.key.url" "content for my-repo-identifier.list" "package1 package2 ..." [add immediately (Y/N)]
function apt_register_repository() {

    command -v wget &>/dev/null || apt_force_install_packages "wget"

    local p

    if [ ! -e "/etc/apt/sources.list.d/$1.list" ]; then

        for p in $4; do

            # without BASH 4+, we have to kludge our associative arrays
            APT_REPO_REGISTRY+=("$1")
            APT_REPO_KEY_URLS+=("$2")
            APT_REPO_ENTRIES+=("$3")
            APT_REPO_PACKAGES+=("$p")

        done

        if [ "${5:-N}" = "Y" ]; then

            apt_add_repo "$1"

        fi

    else

        # because keys change sometimes
        apt_add_key_from_url "$2"

    fi

}

# use this when you don't need the latest package index files
function apt_mark_cache_clean() {

    [ "$APT_CACHE_DIRTY" -ne "0" ] && apt_refresh_packages && APT_CACHE_DIRTY=0

}

function apt_make_cache_clean() {

    if [ "$APT_CACHE_DIRTY" -ne "0" ]; then

        console_message "Updating package lists..." "" $BLUE

        sudo apt-get "${APT_GET_OPTIONS[@]}" -qq update && apt_refresh_packages && APT_CACHE_DIRTY=0 || die "Error: apt-get update failed"

    fi

}

# Usage: apt_get_package_list "${INSTALL[*]}" "${IGNORED[*]}" "${SUPPRESSED[*]}" "${REMOVE[*]}" "${SILENCED[*]}" [return silent? (Y/N)]
function apt_get_package_list() {

    local p q IGNORED=" $2 " SUPPRESSED=($3) REMOVE=($4) SILENCED=" $5 " RETURN_SILENT="${6:-N}" LIST=() BAD_LIST=()

    for p in $1; do

        # suppressed? lift the suppression
        for q in "${!SUPPRESSED[@]}"; do

            [ "$p" = "${SUPPRESSED[$q]}" ] && unset SUPPRESSED[$q]

        done

        # being removed? not anymore
        for q in "${!REMOVE[@]}"; do

            [ "$p" = "${REMOVE[$q]}" ] && unset REMOVE[$q]

        done

        # unavailable? ignore if possible, otherwise add to BAD_LIST
        if ! apt_package_available "$p"; then

            if [[ "$IGNORED" == *" $p "* ]]; then

                console_message "Package unavailable for installation (ignoring):" "$p" $RED >&2

            else

                BAD_LIST+=("$p")

            fi

            continue

        fi

        # return silent and non-silent packages separately
        if [[ "$SILENCED" == *" $p "* ]]; then

            [ "$RETURN_SILENT" = "Y" ] && LIST+=("$p")

        else

            [ "$RETURN_SILENT" != "Y" ] && LIST+=("$p")

        fi

    done

    [ "${#BAD_LIST[@]}" -gt "0" ] && console_message "$(single_or_plural ${#BAD_LIST[@]} Package Packages) unavailable for installation:" "${BAD_LIST[*]}" $RED >&2 && false

    [ "$RETURN_SILENT" != "Y" ] && for q in "${REMOVE[@]}"; do

        apt_package_installed "$q" && LIST+=("${q}-")

    done

    [ "${#LIST[@]}" -gt "0" ] && for q in "${SUPPRESSED[@]}"; do

        # suppressing doesn't mean removing
        ! apt_package_installed "$q" && LIST+=("${q}-")

    done

    echo "${LIST[*]}"

}

# Usage: apt_install_packages "Description of this group of packages" "package1 package2 ..." [allow user override (Y/N)] [queue only (Y/N)]
function apt_install_packages() {

    local UI="${3:-Y}" QUEUE_ONLY="${4:-Y}"

    apt_make_cache_clean

    local INSTALLED=() INSTALL=() SILENT_INSTALL=() PRETTY_INSTALL=() IGNORED=() SUPPRESSED=() SILENCED=() IGNORE SUPPRESS NO_INTERACT PPA_QUEUE=() PPA_INDEX REPO_QUEUE=() REPO_INDEX OPTIONS QUEUE PROMPT_EXTRA= p

    console_message "Checking $1..." "" $CYAN

    for p in $2; do

        IGNORE=0
        SUPPRESS=0
        NO_INTERACT=0

        while [[ "${p:(-1)}" =~ [+?\!-] ]]; do

            case "${p:(-1)}" in

            \?)
                IGNORE=1
                ;;

            \-)
                SUPPRESS=1
                ;;

            \!)
                NO_INTERACT=1
                ;;

            esac

            p="${p::(-1)}"

        done

        [ "$SUPPRESS" -eq "1" ] && SUPPRESSED+=("$p") && continue
        [ "$IGNORE" -eq "1" ] && IGNORED+=("$p")
        [ "$NO_INTERACT" -eq "1" ] && SILENCED+=("$p")

        PPA_INDEX=$(array_search "$p" APT_PPA_PACKAGES) || true
        REPO_INDEX=$(array_search "$p" APT_REPO_PACKAGES) || true

        if [ -n "$PPA_INDEX" ]; then

            INSTALL+=("$p")
            PPA_QUEUE+=("${APT_PPA_REGISTRY[$PPA_INDEX]}")

        elif [ -n "$REPO_INDEX" ]; then

            INSTALL+=("$p")
            REPO_QUEUE+=("${APT_REPO_REGISTRY[$REPO_INDEX]}")

        elif apt_package_installed "$p"; then

            INSTALLED+=("$p")

        else

            # if this package is allowed to be unavailable, isn't associated with a queued repo, and isn't available, ignore it now rather than prompting the user
            if [ "$IGNORE" -eq "1" -a -z "$PPA_INDEX" -a -z "$REPO_INDEX" ] && ! apt_package_available "$p"; then

                console_message "Package unavailable for installation (ignoring):" "$p" $RED >&2

            else

                INSTALL+=("$p")

            fi

        fi

    done

    APT_INSTALLED+=("${INSTALLED[@]}")

    if [ "${#INSTALL[@]}" -gt "0" ]; then

        OPTIONS=("${APT_GET_OPTIONS[@]}")

        QUEUE=($(printf '%s\n' "${PPA_QUEUE[@]}" "${REPO_QUEUE[@]}" | sort | uniq))

        if [ "$UI" = "Y" ]; then

            console_message "Missing $1 $(single_or_plural ${#INSTALL[@]} package packages):" "$(apt_pretty_packages "$(apt_filter_packages "${INSTALL[*]}")" $BLUE)" $BLUE

            [ "${#QUEUE[@]}" -gt "0" ] && console_message "These packages depend on ${#QUEUE[@]} missing $(single_or_plural ${#QUEUE[@]} repository repositories):" "${QUEUE[*]}" $BLUE && PROMPT_EXTRA=" and $(single_or_plural ${#QUEUE[@]} repository repositories)"
            echo

            get_confirmation "Add the $1 $(single_or_plural ${#INSTALL[@]} package packages)${PROMPT_EXTRA} listed above?" || return

        else

            { array_search "-y" APT_GET_OPTIONS || array_search "--yes" APT_GET_OPTIONS || array_search "--assume-yes" APT_GET_OPTIONS || OPTIONS+=("-y"); } >/dev/null

        fi

        if [ "$QUEUE_ONLY" = "N" ]; then

            [ "${#QUEUE[@]}" -gt "0" ] && console_message "Adding ${#QUEUE[@]} $(single_or_plural ${#QUEUE[@]} repository repositories):" "${QUEUE[*]}" $GREEN

            [ "${#PPA_QUEUE[@]}" -gt "0" ] && {
                QUEUE=($(printf '%s\n' "${PPA_QUEUE[@]}" | sort | uniq))
                apt_add_ppa "${QUEUE[@]}"
            }

            [ "${#REPO_QUEUE[@]}" -gt "0" ] && {
                QUEUE=($(printf '%s\n' "${REPO_QUEUE[@]}" | sort | uniq))
                apt_add_repo "${QUEUE[@]}"
            }

            apt_make_cache_clean
            INSTALL=($(apt_get_package_list "${INSTALL[*]}" "${IGNORED[*]}" "${SUPPRESSED[*]}" "" "${SILENCED[*]}"))
            SILENT_INSTALL=($(apt_get_package_list "${INSTALL[*]}" "${IGNORED[*]}" "${SUPPRESSED[*]}" "" "${SILENCED[*]}" Y))
            PRETTY_INSTALL=($(apt_pretty_packages "$(apt_filter_packages "${INSTALL[*]} ${SILENT_INSTALL[*]}")" $GREEN))
            console_message "Installing ${#PRETTY_INSTALL[@]} $(single_or_plural ${#PRETTY_INSTALL[@]} package packages):" "${PRETTY_INSTALL[*]}" $GREEN
            echo

            if [ "${#INSTALL[@]}" -gt "0" ]; then

                sudo apt-get "${OPTIONS[@]}" install "${INSTALL[@]}" && {
                    APT_INSTALLED+=($(apt_filter_packages "${INSTALL[*]}" N))
                    APT_JUST_INSTALLED+=("${INSTALL[@]}")
                    apt_refresh_packages
                }

            fi

            if [ "${#SILENT_INSTALL[@]}" -gt "0" ]; then

                sudo DEBIAN_FRONTEND=noninteractive apt-get "${OPTIONS[@]}" install "${SILENT_INSTALL[@]}" && {
                    APT_INSTALLED+=($(apt_filter_packages "${SILENT_INSTALL[*]}" N))
                    APT_JUST_INSTALLED+=("${SILENT_INSTALL[@]}")
                    apt_refresh_packages
                }

            fi

        else

            APT_INSTALL_QUEUE+=("${INSTALL[@]}")
            APT_IGNORED+=("${IGNORED[@]}")
            APT_SUPPRESSED+=("${SUPPRESSED[@]}")
            APT_SILENCED+=("${SILENCED[@]}")
            APT_PPA_QUEUE+=("${PPA_QUEUE[@]}")
            APT_REPO_QUEUE+=("${REPO_QUEUE[@]}")

        fi

    fi

}

function apt_add_ppa() {

    local ppa i

    for ppa in $(printf '%s\n' "$@" | sort | uniq); do

        [ -z "$ppa" ] && continue

        sudo add-apt-repository -yn "ppa:$ppa"

        APT_CACHE_DIRTY=1

        for i in "${!APT_PPA_REGISTRY[@]}"; do

            if [ "$ppa" = "${APT_PPA_REGISTRY[$i]}" ]; then

                unset APT_PPA_REGISTRY[$i]
                unset APT_PPA_PACKAGES[$i]

            fi

        done

        for i in "${!APT_PPA_QUEUE[@]}"; do

            if [ "$ppa" = "${APT_PPA_QUEUE[$i]}" ]; then

                unset APT_PPA_QUEUE[$i]

            fi

        done

    done

}

function apt_add_repo() {

    local repo i KEY_URL ENTRY

    for repo in $(printf '%s\n' "$@" | sort | uniq); do

        [ -z "$repo" ] && continue

        i=$(array_search "$repo" APT_REPO_REGISTRY) || die "Error: unable to find metadata for repository '$repo'"

        KEY_URL="${APT_REPO_KEY_URLS[$i]}"
        ENTRY="${APT_REPO_ENTRIES[$i]}"

        echo "$ENTRY" | sudo tee "/etc/apt/sources.list.d/$repo.list" >/dev/null || die "Error: unable to write to /etc/apt/sources.list.d/$repo.list"

        apt_add_key_from_url "$KEY_URL" || die "Error: unable to add GPG key for $repo from $1"

        APT_CACHE_DIRTY=1

        for i in "${!APT_REPO_REGISTRY[@]}"; do

            if [ "$repo" = "${APT_REPO_REGISTRY[$i]}" ]; then

                unset APT_REPO_REGISTRY[$i]
                unset APT_REPO_KEY_URLS[$i]
                unset APT_REPO_ENTRIES[$i]
                unset APT_REPO_PACKAGES[$i]

            fi

        done

        for i in "${!APT_REPO_QUEUE[@]}"; do

            if [ "$repo" = "${APT_REPO_QUEUE[$i]}" ]; then

                unset APT_REPO_QUEUE[$i]

            fi

        done

    done

}

function apt_deb_path() {

    echo "$RS_CACHE_DIR/deb/${1//[^._[:alnum:]]/-}"

}

# Usage: apt_install_deb "http://url.to/package.deb" [delete cached (Y/N)] [queue only (Y/N)]
function apt_install_deb() {

    command -v wget &>/dev/null || apt_force_install_packages "wget"

    if [ "${2:-N}" = "Y" ]; then

        rm -f "$(apt_deb_path "$1")"

    fi

    # queue by default
    if [ "${3:-Y}" = "Y" ]; then

        APT_DEB_QUEUE+=("$1")

    else

        do_apt_install_deb "$1"

    fi

}

function do_apt_install_deb() {

    local DEB_PATH DEB_PATHS=() PIDS=() WGET_RESULT=0 SKIPPED=() NOT_SKIPPED=() DEB_PACKAGE DEB_VERSION INSTALLED_VERSION pid url path

    console_message "Downloading $# deb $(single_or_plural "$#" package packages)..." "" $BLUE

    for url in "$@"; do

        DEB_PATH="$(apt_deb_path "$url")"
        DEB_PATHS+=("$DEB_PATH")
        mkdir -p "$(dirname "$DEB_PATH")"

        (
            wget -qcO "$DEB_PATH" "$url" && console_message "Finished downloading:" "$url" $GREEN || {
                console_message "Unable to download:" "$url" $RED >&2
                false
            }
        ) &

        PIDS+=("$!")

    done

    for pid in "${PIDS[@]}"; do

        wait "$pid" || WGET_RESULT=1

    done

    [ "$WGET_RESULT" -eq "0" ]

    for path in "${!DEB_PATHS[@]}"; do

        DEB_PACKAGE="$(
            set -euo pipefail
            dpkg-deb --showformat '${Package}' -W "${DEB_PATHS[$path]}" | tail -n 1
        )"

        if apt_package_installed "$DEB_PACKAGE"; then

            DEB_VERSION="$(
                set -euo pipefail
                dpkg-deb --showformat '${Version}' -W "${DEB_PATHS[$path]}" | tail -n 1
            )"
            INSTALLED_VERSION="$(dpkg-query -f '${Version}' -W "$DEB_PACKAGE")"

            if dpkg --compare-versions "$DEB_VERSION" le "$INSTALLED_VERSION"; then

                SKIPPED+=("$DEB_PACKAGE")
                APT_INSTALLED+=("$DEB_PACKAGE")
                unset DEB_PATHS[$path]
                continue

            fi

        fi

        NOT_SKIPPED+=("$DEB_PACKAGE")

    done

    [ "${#SKIPPED[@]}" -gt "0" ] && console_message "Packages skipped because they don't upgrade the installed version:" "${SKIPPED[*]}" $BLUE
    [ "${#NOT_SKIPPED[@]}" -gt "0" ] && console_message "Installing deb packages:" "${NOT_SKIPPED[*]}" $GREEN

    if [ "${#DEB_PATHS[@]}" -gt "0" ]; then

        { sudo dpkg -EGi "${DEB_PATHS[@]}" || sudo aptitude -yf install; } && {
            APT_INSTALLED+=("${NOT_SKIPPED[@]}")
            APT_JUST_INSTALLED+=("${NOT_SKIPPED[@]}")
            apt_refresh_packages
        }

    fi

}

# Usage: apt_remove_packages "package1 package2 ..."
function apt_remove_packages() {

    local p

    for p in $*; do

        if apt_package_installed "$p" && ! array_search "$p" APT_REMOVE_QUEUE >/dev/null; then

            APT_REMOVE_QUEUE+=("$p")

        fi

    done

}

function apt_process_queue() {

    local QUEUE SILENT_QUEUE PRETTY_QUEUE

    if [ "${#APT_INSTALL_QUEUE[@]}" -gt "0" ]; then

        QUEUE=($(printf '%s\n' "${APT_PPA_QUEUE[@]}" "${APT_REPO_QUEUE[@]}" | sort | uniq))

        [ "${#QUEUE[@]}" -gt "0" ] && console_message "Adding ${#QUEUE[@]} $(single_or_plural ${#QUEUE[@]} repository repositories):" "${QUEUE[*]}" $GREEN

        [ "${#APT_PPA_QUEUE[@]}" -gt "0" ] && {
            QUEUE=($(printf '%s\n' "${APT_PPA_QUEUE[@]}" | sort | uniq))
            apt_add_ppa "${QUEUE[@]}"
        }

        [ "${#APT_REPO_QUEUE[@]}" -gt "0" ] && {
            QUEUE=($(printf '%s\n' "${APT_REPO_QUEUE[@]}" | sort | uniq))
            apt_add_repo "${QUEUE[@]}"
        }

        apt_make_cache_clean
        QUEUE=($(apt_get_package_list "${APT_INSTALL_QUEUE[*]}" "${APT_IGNORED[*]}" "${APT_SUPPRESSED[*]}" "${APT_REMOVE_QUEUE[*]}" "${APT_SILENCED[*]}"))
        SILENT_QUEUE=($(apt_get_package_list "${APT_INSTALL_QUEUE[*]}" "${APT_IGNORED[*]}" "${APT_SUPPRESSED[*]}" "${APT_REMOVE_QUEUE[*]}" "${APT_SILENCED[*]}" Y))
        PRETTY_QUEUE=($(apt_pretty_packages "$(apt_filter_packages "${QUEUE[*]} ${SILENT_QUEUE[*]}")" $GREEN))
        console_message "Installing ${#PRETTY_QUEUE[@]} $(single_or_plural ${#PRETTY_QUEUE[@]} package packages):" "${PRETTY_QUEUE[*]}" $GREEN
        echo

        if [ "${#QUEUE[@]}" -gt "0" ]; then

            sudo apt-get "${APT_GET_OPTIONS[@]}" install "${QUEUE[@]}" && {
                APT_INSTALLED+=($(apt_filter_packages "${QUEUE[*]}" N))
                APT_JUST_INSTALLED+=("${QUEUE[@]}")
                APT_REMOVE_QUEUE=()
                apt_refresh_packages
            }

        fi

        if [ "${#SILENT_QUEUE[@]}" -gt "0" ]; then

            sudo DEBIAN_FRONTEND=noninteractive apt-get "${APT_GET_OPTIONS[@]}" install "${SILENT_QUEUE[@]}" && {
                APT_INSTALLED+=($(apt_filter_packages "${SILENT_QUEUE[*]}" N))
                APT_JUST_INSTALLED+=("${SILENT_QUEUE[@]}")
                APT_INSTALL_QUEUE=()
                apt_refresh_packages
            }

        fi

    fi

    if [ "${#APT_DEB_QUEUE[@]}" -gt "0" ]; then

        do_apt_install_deb "${APT_DEB_QUEUE[@]}" && APT_DEB_QUEUE=()

    fi

}

function apt_force_install_packages() {

    apt_install_packages "prerequisites" "$1" N N

}

# returns all changed configuration files (note: deleted files aren't detected)
function apt_get_changed_configuration_files() {

    command -v debsums &>/dev/null || apt_force_install_packages "debsums"

    sudo debsums -ce 2>/dev/null

}

# returns all new files under /etc
function apt_get_new_configuration_files() {

    command -v debsums &>/dev/null || apt_force_install_packages "debsums"

    sudo find /etc -type f | grep -vFf <(
        set -euo pipefail
        sudo debsums -e 2>/dev/null | sed -E 's/[[:space:]]*[A-Z]+$//'
    )

}

APT_GET_OPTIONS=(-o Acquire::ForceIPv4=true)
APT_CACHE_DIRTY=1
APT_PPA_REGISTRY=()
APT_PPA_PACKAGES=()
APT_REPO_REGISTRY=()
APT_REPO_KEY_URLS=()
APT_REPO_ENTRIES=()
APT_REPO_PACKAGES=()
APT_INSTALLED=()
APT_JUST_INSTALLED=()
APT_IGNORED=()
APT_SUPPRESSED=()
APT_SILENCED=()
APT_INSTALL_QUEUE=()
APT_REMOVE_QUEUE=()
APT_PPA_QUEUE=()
APT_REPO_QUEUE=()
APT_DEB_QUEUE=()
