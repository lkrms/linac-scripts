#!/bin/bash
# shellcheck disable=

function lk_get_firefox_profile() {
    local INI_PATH PROFILE_PATH
    INI_PATH="$HOME/.mozilla/firefox/installs.ini"
    [ -f "$INI_PATH" ] &&
        PROFILE_PATH="$HOME/.mozilla/firefox/$(grep -m 1 '^Default=' "$INI_PATH" | sed 's/^Default=//')" || return
    echo "$PROFILE_PATH"
}

# lk_set_firefox_pref pref_name raw_value
function lk_set_firefox_pref() {
    local USERJS_PATH PREF_LINE USERJS
    USERJS_PATH="$(lk_get_firefox_profile)/user.js" || return
    [ -f "$USERJS_PATH" ] || touch "$USERJS_PATH" || return
    PREF_LINE="user_pref(\"$1\", $2);"
    grep -Fxq "$PREF_LINE" "$USERJS_PATH" || {
        USERJS="$(sed -E "/^user_pref\(\"$(lk_escape_ere "$1")\"/d" "$USERJS_PATH")" || return
        {
            [ -z "$USERJS" ] || echo "$USERJS"
            echo "$PREF_LINE"
        } >"$USERJS_PATH"
    }
}

function lk_open_firefox_ssb() {
    if lk_set_firefox_pref "browser.ssb.enabled" "true"; then
        firefox --ssb "$@"
    else
        firefox "$@"
    fi
}

function lk_open_chrome_ssb() {
    local CHROME_COMMAND INSTANCE_NAME
    for CHROME_COMMAND in google-chrome-stable google-chrome chrome; do
        lk_command_exists "$CHROME_COMMAND" && break || CHROME_COMMAND=
    done
    [ -n "$CHROME_COMMAND" ] || return
    INSTANCE_NAME="$(echo "$1" | sed -Ee 's/^https?:\/\/([^/]+)(\/.*)?$/\1_\2/' -e 's/\//_/g' -e 's/[_]+$//')"
    "$CHROME_COMMAND" --user-data-dir="$HOME/.config/$INSTANCE_NAME" --no-first-run --enable-features=OverlayScrollbar --app="$1" "${@:2}"
}

# lk_openconnect user host [routes...]
function lk_openconnect() {
    local VPN_USER="$1" VPN_HOST="$2" VPN_PASSWD COMMAND
    shift 2 || return
    ! pgrep -x openconnect >/dev/null ||
        lk_warn "openconnect is already running" ||
        return
    lk_secret "$VPN_USER@$VPN_HOST" "$VPN_HOST (OpenConnect)" openconnect &&
        VPN_PASSWD="$LK_SECRET_PASSWORD" &&
        [ -n "$VPN_PASSWD" ] ||
        lk_warn "password required" ||
        return
    COMMAND=(
        openconnect
        --background
        --script "vpn-slice --verbose --dump ${*:---route-internal}"
        --verbose
        --dump-http-traffic
        --passwd-on-stdin
        --protocol "${VPN_PROTOCOL:-gp}"
        --user "$VPN_USER"
        "$VPN_HOST"
    )
    echo "$VPN_PASSWD" | sudo "${COMMAND[@]}" >>"/tmp/openconnect.$USER.log" 2>&1
}

! lk_is_linux || {

    # lk_secret value label [namespace]
    function lk_secret() {
        local NAMESPACE
        NAMESPACE="${3:-$(basename "$0")}"
        lk_command_exists secret-tool || lk_warn "secret-tool: command not found" || return
        if ! LK_SECRET_PASSWORD="$(secret-tool lookup "$NAMESPACE" "$1" 2>/dev/null)"; then
            lk_console_item "Password not found in keychain" "$NAMESPACE:$1" "$LK_RED" >&2
            [ -t 0 ] &&
                [ -t 1 ] &&
                lk_console_message "Please enter the password for $2 now" &&
                secret-tool store --label="$2" "$NAMESPACE" "$1" &&
                LK_SECRET_PASSWORD="$(secret-tool lookup "$NAMESPACE" "$1")" ||
                {
                    LK_SECRET_PASSWORD=
                    return 1
                }
        fi
    }

    function lk_install_icon() {
        local SIZE SIZES=(16x16 24x24 32x32 48x48 64x64 96x96 128x128 256x256 512x512 1024x1024)
        [ -f "$1" ] || return
        for SIZE in "${SIZES[@]}"; do
            mkdir -p "$HOME/.local/share/icons/hicolor/$SIZE/apps" &&
                convert "$1" -resize "$SIZE" "$HOME/.local/share/icons/hicolor/$SIZE/apps/$(basename "$1")" || return
        done
        ! lk_command_exists gtk-update-icon-cache || gtk-update-icon-cache --force --ignore-theme-index --quiet "$HOME/.local/share/icons/hicolor" || true
    }

}
