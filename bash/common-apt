#!/bin/bash
# shellcheck disable=SC2015,SC2034,SC2206,SC2207,SC2046

assert_command_exists apt-get

function apt_apply_preferences() {

    local PREF PREFS=("$@")

    [ "$#" -gt "0" ] || {
        shopt -s nullglob
        PREFS=("$CONFIG_DIR/apt/preferences.d/"*)
        shopt -u nullglob
    }

    [ "${#PREFS[@]}" -eq "0" ] || lk_console_message "Applying apt preferences"

    for PREF in ${PREFS[@]+"${PREFS[@]}"}; do

        [ -e "$PREF" ] || PREF="$CONFIG_DIR/apt/preferences.d/$PREF"

        safe_symlink "$PREF" "/etc/apt/preferences.d/linac-$(basename "$PREF")" Y

    done

}

function apt_check_prerequisites() {

    [ "${#APT_PREREQ[@]}" -gt "0" ] || return 0

    apt_install_packages "prerequisites" "${APT_PREREQ[*]}" N N

}

function apt_check_essentials() {

    local i

    ! command_exists dpkg || ! dpkg -s "linux-generic-hwe-${DISTRIB_RELEASE}" >/dev/null 2>&1 || APT_ESSENTIALS+=("linux-tools-generic-hwe-${DISTRIB_RELEASE}?")

    [ "${#APT_ESSENTIALS[@]}" -gt "0" ] || return 0

    apt_install_packages "essentials" "${APT_ESSENTIALS[*]}" N

}

function apt_package_installed() {

    local STATUS

    [ "${FORCE_INSTALL:-N}" = "N" ] || return

    STATUS="$(dpkg-query -f '${db:Status-Status}' -W "$1" 2>/dev/null)" || return
    [ "$STATUS" = "installed" ]

}

function apt_package_just_installed() {

    printf '%s\n' ${APT_JUST_INSTALLED[@]+"${APT_JUST_INSTALLED[@]}"} | grep -Fx "$1" >/dev/null 2>&1

}

function apt_package_available() {

    apt_make_cache_clean
    apt-cache pkgnames | grep -Fx "$1" >/dev/null 2>&1

}

function apt_list_available_packages() {

    apt_make_cache_clean
    apt-cache pkgnames | sort | uniq

}

function apt_list_installed_packages() {

    dpkg-query -f '${binary:Package}\t${db:Status-Status}\n' -W | gnu_grep -Po "^.*?(?=(:($(array_join_by "|" $(
        dpkg --print-architecture
        dpkg --print-foreign-architectures
    ))))?\tinstalled\$)" | sort | uniq

}

function apt_list_manually_installed_packages() {

    apt-mark showmanual | sort | uniq

}

function apt_describe_packages() {

    local IFS PACKAGES COLOURS="$BOLD" RESET_COLOURS PATTERN RESULTS RESULT_NAMES NAME

    PACKAGES=($1) || die
    [ "${#PACKAGES[@]}" -gt "0" ] || die "At least one package name is required"
    shift

    [ "$#" -eq "0" ] || {
        IFS=
        COLOURS="$*"
        unset IFS
    }

    IFS='|'
    PATTERN="(${PACKAGES[*]})"
    unset IFS

    # `apt-cache -n search` includes "Provides" values, hence the additional `grep`
    # see: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=98695
    RESULTS="$(apt-cache -n search "^$PATTERN\$" | grep -E "^$PATTERN - ")" || true
    RESULT_NAMES="$(echo "$RESULTS" | sed -E "s/^([^ ]+) - .*\$/\1/")"

    for NAME in $(comm -13 <(echo "$RESULT_NAMES" | sort) <(printf '%s\n' "${PACKAGES[@]}" | sort)); do

        RESULTS="${RESULTS:+$RESULTS$'\n'}${NAME}"

    done

    COLOURS="$(sed_escape_replace "$COLOURS")"
    RESET_COLOURS="$(sed_escape_replace "$RESET")"

    echo "$RESULTS" | sort | sed -Ee "s/^([^ ]+) - (.*)\$/${COLOURS}\1:${RESET_COLOURS} \2/" -e "s/^([^ ]+)\$/${COLOURS}\1${RESET_COLOURS}/"

}

# Removes duplicates and suppressed packages.
# Usage: apt_filter_packages "package1 package2 package3-" [include removed? (Y/n)]
function apt_filter_packages() {

    local PACKAGES INCLUDE_REMOVED="${2:-Y}" FILTERED=() p

    PACKAGES=($(sort_words "$1"))

    # TODO: replace loop with comm-based method (as in apt_pretty_packages)
    for p in ${PACKAGES[@]+"${PACKAGES[@]}"}; do

        if [ "${p:(-1)}" = "-" ]; then

            # don't ever include suppressions
            apt_package_installed "${p::(-1)}" || continue

            # optionally include removals
            [ "$INCLUDE_REMOVED" = "Y" ] || continue

        fi

        FILTERED+=("$p")

    done

    echo "${FILTERED[*]+${FILTERED[*]}}"

}

# Highlights packages being removed. Optionally reflows text (not desirable if preformatted with `column`, for example).
# Usage: apt_pretty_packages "package1 package2 package3-" [reflow text? (y/N)]
function apt_pretty_packages() {

    local FORMATTED="$1" REFLOW="${2:-N}" REMOVE_PACKAGES REFLOWED FIND REPLACE p

    apt_make_cache_clean

    # shellcheck disable=SC2086
    REMOVE_PACKAGES=($(printf '%s\n' $1 | gnu_grep -Po '^.*[^-]+(?=-$)' | sort | uniq)) || true

    if [ "$REFLOW" = "N" ]; then

        for p in ${REMOVE_PACKAGES[@]+"${REMOVE_PACKAGES[@]}"}; do

            # replace the trailing hyphen with a space to preserve formatting
            FIND="(\s|^)$(sed_escape_search "$p")-(\s|\$)"
            REPLACE="\1$(sed_escape_replace "${BOLD}${RED}${p}${RESET} ")\2"

            FORMATTED="$(sed -E "s/${FIND}/${REPLACE}/g" <<<"$FORMATTED")"

        done

        echo "$FORMATTED"

    else

        # shellcheck disable=SC2086
        REFLOWED=($(printf '%s\n' $1 | grep -E '^.*[^-]+$' | sort | uniq)) || true

        for p in ${REMOVE_PACKAGES[@]+"${REMOVE_PACKAGES[@]}"}; do

            REFLOWED+=("${BOLD}${RED}${p}${RESET}")

        done

        echo "${REFLOWED[*]+${REFLOWED[*]}}"

    fi

}

function apt_ubuntu_archive_url() {

    # attempt to return a local URL
    [ -n "${UBUNTU_ARCHIVE_URL:-}" ] ||
        UBUNTU_ARCHIVE_URL="$(gnu_grep -Po '(?<=\s)https?://(\w+\.)archive\.ubuntu\.com/ubuntu(?=/?\s)' /etc/apt/sources.list | head -n1)/" ||
        UBUNTU_ARCHIVE_URL="http://archive.ubuntu.com/ubuntu/"

    echo "$UBUNTU_ARCHIVE_URL"

}

function do_apt_enable_ubuntu_repository() {

    gnu_grep -Pq "^deb\s+https?://(\w+\.)?archive\.ubuntu\.com/ubuntu/?\s+$1\s+.*(?<=\s)$2(\s|\$)" /etc/apt/sources.list || {
        assert_command_exists add-apt-repository
        sudo add-apt-repository "$ADD_APT_REPOSITORY_EXTRA" "deb $(apt_ubuntu_archive_url) $1 $2" || die
        APT_CACHE_DIRTY=1
    }

}

function apt_enable_ubuntu_repository() {

    local SUITE

    SUITE="$1"
    shift

    do_apt_enable_ubuntu_repository "$DISTRIB_CODENAME" "$SUITE"

    while [ -n "${1:-}" ]; do

        do_apt_enable_ubuntu_repository "${DISTRIB_CODENAME}-$1" "$SUITE"
        shift

    done

}

function apt_cat_sources() {

    shopt -s nullglob
    cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list || die
    shopt -u nullglob

}

# apt_register_ppa "the/ppa" "package1 package2 ..." [add immediately? (y/N)] [allow only named packages? (Y/n)]
function apt_register_ppa() {

    local p PIN PREFERENCES=

    PIN="${1/\//-}"
    PIN="${PIN%-ppa}"

    [ -z "$2" ] || [ "${4:-Y}" != "Y" ] || PREFERENCES="\
Package: *
Pin: release o=LP-PPA-$PIN
Pin-Priority: 400

Package: $2
Pin: release o=LP-PPA-$PIN
Pin-Priority: 500
"

    if ! apt_cat_sources | grep -E "^deb\s+https?://ppa\.launchpad\.net/$1/" >/dev/null; then

        for p in $2; do

            APT_PPA_REGISTRY+=("$1")
            APT_PPA_PACKAGES+=("$p")
            APT_PPA_PREFERENCES+=("$PREFERENCES")

        done

        [ "${3:-N}" != "Y" ] || apt_add_ppa "$1"

    elif [ -n "$PREFERENCES" ]; then

        echo "$PREFERENCES" | sudo tee "/etc/apt/preferences.d/ppa-${1//[\/.]/-}.pref" >/dev/null || die

    fi

}

# Usage: apt_register_repository my-repo-identifier "https://gpg.key.url" "content for my-repo-identifier.list" "value for Pin field in apt preferences" "package1 package2 ..." [add immediately? (y/N)] [allow only named packages? (Y/n)]
function apt_register_repository() {

    assert_command_exists wget

    local p PREFERENCES=

    if [ -n "$4" ] && [ -n "$5" ]; then

        if [ "${7:-Y}" = "Y" ]; then

            # exits non-zero on EOF
            IFS= read -rd '' PREFERENCES <<EOF || true
Package: *
Pin: $4
Pin-Priority: 400

Package: $5
Pin: $4
Pin-Priority: 500
EOF

        fi

    fi

    if [ ! -e "/etc/apt/sources.list.d/$1.list" ]; then

        for p in $5; do

            # without BASH 4+, we have to kludge our associative arrays
            APT_REPO_REGISTRY+=("$1")
            APT_REPO_KEY_URLS+=("$2")
            APT_REPO_ENTRIES+=("$3")
            APT_REPO_PACKAGES+=("$p")
            APT_REPO_PREFERENCES+=("$PREFERENCES")

        done

        if [ "${6:-N}" = "Y" ]; then

            apt_add_repo "$1"

        fi

    else

        if [ -n "$PREFERENCES" ]; then

            echo "$PREFERENCES" | sudo tee "/etc/apt/preferences.d/$1.pref" >/dev/null || die

        fi

    fi

}

function apt_mark_cache_clean() {

    [ "$APT_CACHE_DIRTY" -eq "0" ] || {
        apt_check_sources
        APT_CACHE_DIRTY=0
    }

}

function apt_make_cache_clean() {

    [ "$APT_CACHE_DIRTY" -eq "0" ] || {
        apt_check_sources
        lk_console_message "Updating apt package indexes"
        sudo apt-get ${APT_GET_OPTIONS[@]+"${APT_GET_OPTIONS[@]}"} -qq update && APT_CACHE_DIRTY=0 || die
    }

}

# Usage: apt_get_package_list "${INSTALL[*]}" "${IGNORED[*]}" "${SUPPRESSED[*]}" "${REMOVE[*]}" "${SILENCED[*]}" [return silent? (y/N)]
function apt_get_package_list() {

    local p q IGNORED=" $2 " SUPPRESSED=($3) REMOVE=($4) SILENCED=" $5 " RETURN_SILENT="${6:-N}" LIST=() BAD_LIST=()

    for p in $1; do

        # suppressed? lift the suppression
        for q in "${!SUPPRESSED[@]}"; do

            [ "$p" = "${SUPPRESSED[$q]}" ] && unset "SUPPRESSED[$q]" || true

        done

        # being removed? not anymore
        for q in "${!REMOVE[@]}"; do

            [ "$p" = "${REMOVE[$q]}" ] && unset "REMOVE[$q]" || true

        done

        # return silent and non-silent packages separately
        if [[ "$SILENCED" == *" $p "* ]]; then

            [ "$RETURN_SILENT" = "Y" ] || continue

        else

            [ "$RETURN_SILENT" != "Y" ] || continue

        fi

        # unavailable? ignore if possible, otherwise add to BAD_LIST
        if ! apt_package_available "$p"; then

            if [[ "$IGNORED" == *" $p "* ]]; then

                APT_SKIPPED+=("$p")

            else

                BAD_LIST+=("$p")

            fi

            continue

        fi

        LIST+=("$p")

    done

    [ "${#BAD_LIST[@]}" -eq "0" ] || {
        lk_echo_array "${BAD_LIST[@]}" | lk_console_list "$(single_or_plural "${#BAD_LIST[@]}" Package Packages) unavailable for installation" "$BOLD$RED" >&2
        die
    }

    for q in ${REMOVE[@]+"${REMOVE[@]}"}; do

        apt_package_installed "$q" && LIST+=("${q}-")

    done

    [ "${#LIST[@]}" -gt "0" ] && for q in ${SUPPRESSED[@]+"${SUPPRESSED[@]}"}; do

        # suppressing doesn't mean removing
        ! apt_package_installed "$q" && LIST+=("${q}-")

    done

    echo "${LIST[*]+${LIST[*]}}"

}

# Usage: apt_install_packages "Description of this group of packages" "package1 package2 ..." [allow user override? (Y/n)] [queue only? (Y/n)]
function apt_install_packages() {

    local UI="${3:-Y}" QUEUE_ONLY="${4:-Y}" INSTALLED=() INSTALL=() IGNORED=() SUPPRESSED=() SILENCED=() IGNORE SUPPRESS SILENCE PPA_QUEUE=() PPA_INDEX REPO_QUEUE=() REPO_INDEX QUEUE PROMPT_EXTRA="" INSTALL_QUEUE SILENT_QUEUE PRETTY_QUEUE SUDO_EXTRA=() p q

    apt_make_cache_clean

    lk_console_item "Checking apt packages" "$1"

    for p in $2; do

        IGNORE=0
        SUPPRESS=0
        SILENCE=0

        while [[ "${p:(-1)}" =~ [+?\!-] ]]; do

            case "${p:(-1)}" in

            "?")
                IGNORE=1
                ;;

            "-")
                SUPPRESS=1
                ;;

            "!")
                SILENCE=1
                ;;

            esac

            p="${p::(-1)}"

        done

        [ "$SUPPRESS" -eq "1" ] && SUPPRESSED+=("$p") && continue || true
        [ "$IGNORE" -eq "1" ] && IGNORED+=("$p") || true
        [ "$SILENCE" -eq "1" ] && SILENCED+=("$p") || true

        PPA_INDEX=$(array_search "$p" APT_PPA_PACKAGES) || true
        REPO_INDEX=$(array_search "$p" APT_REPO_PACKAGES) || true

        if [ -n "$PPA_INDEX" ]; then

            INSTALL+=("$p")
            PPA_QUEUE+=("${APT_PPA_REGISTRY[$PPA_INDEX]}")

        elif [ -n "$REPO_INDEX" ]; then

            INSTALL+=("$p")
            REPO_QUEUE+=("${APT_REPO_REGISTRY[$REPO_INDEX]}")

        elif apt_package_installed "$p"; then

            INSTALLED+=("$p")

        else

            # if this package is allowed to be unavailable, isn't associated with a queued repo, and isn't available, ignore it now rather than prompting the user
            if [ "$IGNORE" -eq "1" ] && [ -z "$PPA_INDEX" ] && [ -z "$REPO_INDEX" ] && ! apt_package_available "$p"; then

                APT_SKIPPED+=("$p")

            else

                INSTALL+=("$p")

            fi

        fi

    done

    APT_INSTALLED+=(${INSTALLED[@]+"${INSTALLED[@]}"})

    if [ "${#INSTALL[@]}" -gt "0" ]; then

        QUEUE=($(printf '%s\n' ${PPA_QUEUE[@]+"${PPA_QUEUE[@]}"} ${REPO_QUEUE[@]+"${REPO_QUEUE[@]}"} | sort | uniq))

        if [ "$UI" = "Y" ]; then

            lk_console_message "Missing $1 $(single_or_plural ${#INSTALL[@]} package packages):" "$BOLD$MAGENTA"

            apt_describe_packages "${INSTALL[*]}" "$BOLD$MAGENTA"

            [ "${#QUEUE[@]}" -gt "0" ] && {
                lk_echo_array "${QUEUE[@]}" | lk_console_list "These packages depend on ${#QUEUE[@]} missing $(single_or_plural ${#QUEUE[@]} repository repositories)" "$BOLD$MAGENTA"
                PROMPT_EXTRA=" and $(single_or_plural ${#QUEUE[@]} repository repositories)"
            }

            get_confirmation "Add the $1 $(single_or_plural ${#INSTALL[@]} package packages)${PROMPT_EXTRA} listed above?" Y Y || return 0

        fi

        if [ "$QUEUE_ONLY" = "N" ]; then

            [ "${#QUEUE[@]}" -gt "0" ] && lk_echo_array "${QUEUE[@]}" | lk_console_list "Adding ${#QUEUE[@]} $(single_or_plural ${#QUEUE[@]} repository repositories)" "$GREEN"

            for q in PPA REPO; do

                eval "QUEUE=(\${${q}_QUEUE[@]+\"\${${q}_QUEUE[@]}\"})"

                [ "${#QUEUE[@]}" -gt "0" ] && {
                    QUEUE=($(printf '%s\n' "${QUEUE[@]}" | sort | uniq))
                    eval "apt_add_$(lower $q)" "${QUEUE[@]}" || die
                }

            done

            apt_make_cache_clean
            INSTALL_QUEUE=($(apt_get_package_list "${INSTALL[*]}" "${IGNORED[*]+${IGNORED[*]}}" "${SUPPRESSED[*]+${SUPPRESSED[*]}}" "" "${SILENCED[*]+${SILENCED[*]}}" N))
            SILENT_QUEUE=($(apt_get_package_list "${INSTALL[*]}" "${IGNORED[*]+${IGNORED[*]}}" "${SUPPRESSED[*]+${SUPPRESSED[*]}}" "" "${SILENCED[*]+${SILENCED[*]}}" Y))
            PRETTY_QUEUE=($(apt_filter_packages "${INSTALL_QUEUE[*]+${INSTALL_QUEUE[*]}} ${SILENT_QUEUE[*]+${SILENT_QUEUE[*]}}"))

            lk_console_item "Installing ${#PRETTY_QUEUE[@]} $(single_or_plural ${#PRETTY_QUEUE[@]} package packages):" "$(apt_pretty_packages "${PRETTY_QUEUE[*]+${PRETTY_QUEUE[*]}}" Y)" "$GREEN"

            for q in INSTALL SILENT; do

                eval "QUEUE=(\${${q}_QUEUE[@]+\"\${${q}_QUEUE[@]}\"})"

                if [ "${#QUEUE[@]}" -gt "0" ]; then

                    sudo ${SUDO_EXTRA[@]+"${SUDO_EXTRA[@]}"} apt-get ${APT_GET_OPTIONS[@]+"${APT_GET_OPTIONS[@]}"} install "${QUEUE[@]}" && {
                        APT_INSTALLED+=($(apt_filter_packages "${QUEUE[*]}" N))
                        APT_JUST_INSTALLED+=($(apt_filter_packages "${QUEUE[*]}" N))
                    } || die

                fi

                SUDO_EXTRA+=("DEBIAN_FRONTEND=noninteractive")

            done

        else

            APT_INSTALL_QUEUE+=("${INSTALL[@]}")
            APT_IGNORED+=(${IGNORED[@]+"${IGNORED[@]}"})
            APT_SUPPRESSED+=(${SUPPRESSED[@]+"${SUPPRESSED[@]}"})
            APT_SILENCED+=(${SILENCED[@]+"${SILENCED[@]}"})
            APT_PPA_QUEUE+=(${PPA_QUEUE[@]+"${PPA_QUEUE[@]}"})
            APT_REPO_QUEUE+=(${REPO_QUEUE[@]+"${REPO_QUEUE[@]}"})

        fi

    fi

}

function apt_add_ppa() {

    local ppa i PREFERENCES

    for ppa in $(printf '%s\n' "$@" | sort | uniq); do

        [ -z "$ppa" ] && continue || true

        i=$(array_search "$ppa" APT_PPA_REGISTRY) || die "Error: unable to find metadata for PPA '$ppa'"

        assert_command_exists add-apt-repository

        sudo add-apt-repository "$ADD_APT_REPOSITORY_EXTRA" "ppa:$ppa" || die

        PREFERENCES="${APT_PPA_PREFERENCES[$i]}"

        if [ -n "$PREFERENCES" ]; then

            echo "$PREFERENCES" | sudo tee "/etc/apt/preferences.d/ppa-${ppa//[\/.]/-}.pref" >/dev/null || die

        fi

        APT_CACHE_DIRTY=1

        for i in "${!APT_PPA_REGISTRY[@]}"; do

            if [ "$ppa" = "${APT_PPA_REGISTRY[$i]}" ]; then

                unset "APT_PPA_REGISTRY[$i]"
                unset "APT_PPA_PACKAGES[$i]"
                unset "APT_PPA_PREFERENCES[$i]"

            fi

        done

        for i in "${!APT_PPA_QUEUE[@]}"; do

            if [ "$ppa" = "${APT_PPA_QUEUE[$i]}" ]; then

                unset "APT_PPA_QUEUE[$i]"

            fi

        done

    done

}

function apt_add_repo() {

    local repo i KEY_URL KEY_ID ENTRY

    for repo in $(printf '%s\n' "$@" | sort | uniq); do

        [ -z "$repo" ] && continue || true

        i=$(array_search "$repo" APT_REPO_REGISTRY) || die "Error: unable to find metadata for repository '$repo'"

        KEY_URL="${APT_REPO_KEY_URLS[$i]}"
        ENTRY="${APT_REPO_ENTRIES[$i]}"
        PREFERENCES="${APT_REPO_PREFERENCES[$i]}"

        echo "$ENTRY" | sudo tee "/etc/apt/sources.list.d/$repo.list" >/dev/null || die

        if is_url "$KEY_URL"; then

            wget -qO - "$KEY_URL" | sudo apt-key add - >/dev/null 2>&1 || die "Error: unable to add GPG key from $KEY_URL"

        else

            for KEY_ID in $KEY_URL; do

                sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$KEY_ID" >/dev/null 2>&1 || die "Error: unable to add GPG key $KEY_ID from Ubuntu keyserver"

            done

        fi

        if [ -n "$PREFERENCES" ]; then

            echo "$PREFERENCES" | sudo tee "/etc/apt/preferences.d/$repo.pref" >/dev/null || die

        fi

        APT_CACHE_DIRTY=1

        for i in "${!APT_REPO_REGISTRY[@]}"; do

            if [ "$repo" = "${APT_REPO_REGISTRY[$i]}" ]; then

                unset "APT_REPO_REGISTRY[$i]"
                unset "APT_REPO_KEY_URLS[$i]"
                unset "APT_REPO_ENTRIES[$i]"
                unset "APT_REPO_PACKAGES[$i]"
                unset "APT_REPO_PREFERENCES[$i]"

            fi

        done

        for i in "${!APT_REPO_QUEUE[@]}"; do

            if [ "$repo" = "${APT_REPO_QUEUE[$i]}" ]; then

                unset "APT_REPO_QUEUE[$i]"

            fi

        done

    done

}

# Usage: apt_install_deb "http://url.to/package.deb" [queue only? (Y/n)]
function apt_install_deb() {

    assert_command_exists wget

    # queue by default
    if [ "${2:-Y}" = "Y" ]; then

        APT_DEB_QUEUE+=("$1")

    else

        do_apt_install_deb "$1"

    fi

}

function do_apt_install_deb() {

    local PATHS DEB_PATHS=() SKIPPED=() NOT_SKIPPED=() DEB_PACKAGE DEB_VERSION INSTALLED_VERSION path

    mkdir -p "$APT_DEB_PATH" && pushd "$APT_DEB_PATH" >/dev/null || die "Error: unable to access $APT_DEB_PATH"

    lk_console_message "Downloading $# deb $(single_or_plural "$#" package packages)"

    # allow "429 Too Many Requests"
    # shellcheck disable=SC2034
    DOWNLOAD_URLS_SKIP_REGEX='^\s*HTTP/[0-9.]+\s+429\b'

    PATHS="$(
        download_urls "$@"
    )" || die

    while IFS= read -r path; do

        DEB_PATHS+=("$path")

    done < <(echo "$PATHS")

    popd >/dev/null

    for path in "${!DEB_PATHS[@]}"; do

        DEB_PACKAGE="$(

            # shellcheck disable=SC2016
            dpkg-deb --showformat '${Package}' -W "${DEB_PATHS[$path]}" | tail -n 1
        )"

        if apt_package_installed "$DEB_PACKAGE"; then

            DEB_VERSION="$(

                # shellcheck disable=SC2016
                dpkg-deb --showformat '${Version}' -W "${DEB_PATHS[$path]}" | tail -n 1
            )"
            INSTALLED_VERSION="$(dpkg-query -f '${Version}' -W "$DEB_PACKAGE")"

            if dpkg --compare-versions "$DEB_VERSION" le "$INSTALLED_VERSION"; then

                SKIPPED+=("$DEB_PACKAGE")
                APT_INSTALLED+=("$DEB_PACKAGE")
                unset "DEB_PATHS[$path]"
                continue

            fi

        fi

        NOT_SKIPPED+=("$DEB_PACKAGE")

    done

    [ "${#NOT_SKIPPED[@]}" -gt "0" ] && lk_console_item "Installing deb $(single_or_plural "${#NOT_SKIPPED[@]}" package packages):" "${NOT_SKIPPED[*]}" "$GREEN"

    if [ "${#DEB_PATHS[@]}" -gt "0" ]; then

        if sudo dpkg -EGi "${DEB_PATHS[@]}" || sudo aptitude -f install; then

            APT_INSTALLED+=(${NOT_SKIPPED[@]+"${NOT_SKIPPED[@]}"})
            APT_JUST_INSTALLED+=(${NOT_SKIPPED[@]+"${NOT_SKIPPED[@]}"})
            APT_SKIPPED+=(${SKIPPED[@]+"${SKIPPED[@]}"})

        else

            die

        fi

    fi

}

# Usage: apt_remove_packages "package1 package2 ..."
function apt_remove_packages() {

    local p

    # shellcheck disable=SC2048
    for p in $*; do

        if apt_package_installed "$p" && ! in_array "$p" APT_REMOVE_QUEUE; then

            APT_REMOVE_QUEUE+=("$p")

        fi

    done

}

function apt_process_queue() {

    local q QUEUE INSTALL_QUEUE SILENT_QUEUE PRETTY_QUEUE SUDO_EXTRA=()

    if [ "${#APT_INSTALL_QUEUE[@]}" -gt "0" ] || [ "${#APT_REMOVE_QUEUE[@]}" -gt "0" ]; then

        QUEUE=($(printf '%s\n' ${APT_PPA_QUEUE[@]+"${APT_PPA_QUEUE[@]}"} ${APT_REPO_QUEUE[@]+"${APT_REPO_QUEUE[@]}"} | sort | uniq))

        [ "${#QUEUE[@]}" -gt "0" ] && lk_console_item "Adding ${#QUEUE[@]} $(single_or_plural ${#QUEUE[@]} repository repositories):" "${QUEUE[*]}" "$GREEN"

        for q in PPA REPO; do

            eval "QUEUE=(\${APT_${q}_QUEUE[@]+\"\${APT_${q}_QUEUE[@]}\"})"

            [ "${#QUEUE[@]}" -gt "0" ] && {
                QUEUE=($(printf '%s\n' "${QUEUE[@]}" | sort | uniq))
                eval "apt_add_$(lower $q)" "${QUEUE[@]}" || die
            }

        done

        apt_make_cache_clean
        INSTALL_QUEUE=($(apt_get_package_list "${APT_INSTALL_QUEUE[*]}" "${APT_IGNORED[*]+${APT_IGNORED[*]}}" "${APT_SUPPRESSED[*]+${APT_SUPPRESSED[*]}}" "${APT_REMOVE_QUEUE[*]+${APT_REMOVE_QUEUE[*]}}" "${APT_SILENCED[*]+${APT_SILENCED[*]}}" N))
        SILENT_QUEUE=($(apt_get_package_list "${APT_INSTALL_QUEUE[*]}" "${APT_IGNORED[*]+${APT_IGNORED[*]}}" "${APT_SUPPRESSED[*]+${APT_SUPPRESSED[*]}}" "" "${APT_SILENCED[*]+${APT_SILENCED[*]}}" Y))
        PRETTY_QUEUE=($(apt_filter_packages "${INSTALL_QUEUE[*]+${INSTALL_QUEUE[*]}} ${SILENT_QUEUE[*]+${SILENT_QUEUE[*]}}"))
        lk_console_item "Applying ${#PRETTY_QUEUE[@]} package $(single_or_plural ${#PRETTY_QUEUE[@]} change changes):" "$(apt_pretty_packages "${PRETTY_QUEUE[*]}" Y)" "$GREEN"

        for q in INSTALL SILENT; do

            eval "QUEUE=(\${${q}_QUEUE[@]+\"\${${q}_QUEUE[@]}\"})"

            if [ "${#QUEUE[@]}" -gt "0" ]; then

                sudo ${SUDO_EXTRA[@]+"${SUDO_EXTRA[@]}"} apt-get ${APT_GET_OPTIONS[@]+"${APT_GET_OPTIONS[@]}"} install "${QUEUE[@]}" && {
                    APT_INSTALLED+=($(apt_filter_packages "${QUEUE[*]}" N))
                    APT_JUST_INSTALLED+=($(apt_filter_packages "${QUEUE[*]}" N))
                } || die

            fi

            SUDO_EXTRA+=("DEBIAN_FRONTEND=noninteractive")

        done

        APT_INSTALL_QUEUE=()
        APT_REMOVE_QUEUE=()

    fi

    if [ "${#APT_DEB_QUEUE[@]}" -gt "0" ]; then

        do_apt_install_deb "${APT_DEB_QUEUE[@]}" && {
            APT_DEB_QUEUE=()
        }

    fi

}

function apt_check_sources() {

    local APT_PROXY='' PROXY_GOOD PROXY_HOST PROXY_PORT

    sudo rm -f "/etc/apt/apt.conf.d/99noproxy"

    # shellcheck disable=SC1091
    . /dev/stdin <<<"$(apt-config shell APT_PROXY "Acquire::http::Proxy")"

    if [ -n "$APT_PROXY" ]; then

        PROXY_GOOD=0

        PROXY_HOST="$(uri_get_parts "$APT_PROXY" host)"
        PROXY_PORT="$(uri_get_parts "$APT_PROXY" port)"

        if [ -n "$PROXY_HOST" ] && [ -n "$PROXY_PORT" ]; then

            if test_host_port "$PROXY_HOST" "$PROXY_PORT"; then

                PROXY_GOOD=1

            fi

        fi

        [ "$PROXY_GOOD" -eq "1" ] || {
            lk_console_item "APT proxy disabled (unreachable):" "$APT_PROXY" "$BOLD$YELLOW"
            echo 'Acquire::http::Proxy "";' | sudo tee "/etc/apt/apt.conf.d/99noproxy" >/dev/null
            APT_PROXY=
        }

    fi

    if [ "${APT_PROXY/:3142/}" != "$APT_PROXY" ]; then

        # if we're using Apt-Cacher NG, replace every "https://" with "http://"
        sudo find /etc/apt /etc/apt/sources.list.d -maxdepth 1 -type f -name '*.list' -exec grep -q '\bhttps://' '{}' \; -exec sed -i.https.orig 's/\bhttps:\/\//http:\/\//' '{}' \;

    else

        # otherwise, move any active https sources back
        sudo find /etc/apt /etc/apt/sources.list.d -maxdepth 1 -type f -name '*.list.https.orig' -exec sh -c 'ORIG="${1%.https.orig}"; if [ -e "$ORIG" ]; then mv "$1" "$ORIG" || exit; fi' sh '{}' \;

    fi

}

function apt_upgrade_all() {

    apt_make_cache_clean

    lk_console_message "Installing all available apt package updates" "$GREEN"

    sudo apt-get ${APT_GET_OPTIONS[@]+"${APT_GET_OPTIONS[@]}"} --fix-missing dist-upgrade || die

}

function apt_purge() {

    local PURGE_PACKAGES IFS

    sudo apt-get ${APT_GET_OPTIONS[@]+"${APT_GET_OPTIONS[@]}"} "$@" autoremove || die

    IFS=$'\n'
    PURGE_PACKAGES=($(dpkg-query -f '${binary:Package}\t${db:Status-Status}\n' -W)) || die
    unset IFS

    PURGE_PACKAGES=($(printf '%s\n' ${PURGE_PACKAGES[@]+"${PURGE_PACKAGES[@]}"} | gnu_grep -Po '^.*(?=\tconfig-files$)')) || true

    [ "${#PURGE_PACKAGES[@]}" -eq "0" ] || sudo apt-get ${APT_GET_OPTIONS[@]+"${APT_GET_OPTIONS[@]}"} "$@" purge "${PURGE_PACKAGES[@]}" || die

}

# returns all changed configuration files (note: deleted files aren't detected)
function apt_get_changed_configuration_files() {

    assert_command_exists debsums

    sudo debsums -ce 2>/dev/null || die

}

# returns all new files under /etc
function apt_get_new_configuration_files() {

    assert_command_exists debsums

    sudo find /etc -type f | grep -vFf <(
        sudo debsums -e 2>/dev/null | sed -E 's/\s*[A-Z]+$//' || die
    ) || die

}

APT_CACHE_DIRTY=1
APT_DEB_PATH="$CACHE_DIR/deb"
APT_GET_OPTIONS=()
APT_PPA_REGISTRY=()
APT_PPA_PACKAGES=()
APT_PPA_PREFERENCES=()
APT_REPO_REGISTRY=()
APT_REPO_KEY_URLS=()
APT_REPO_ENTRIES=()
APT_REPO_PACKAGES=()
APT_REPO_PREFERENCES=()
APT_INSTALLED=()
APT_JUST_INSTALLED=()
APT_IGNORED=()
APT_SUPPRESSED=()
APT_SILENCED=()
APT_INSTALL_QUEUE=()
APT_REMOVE_QUEUE=()
APT_PPA_QUEUE=()
APT_REPO_QUEUE=()
APT_DEB_QUEUE=()
APT_SKIPPED=()

ADD_APT_REPOSITORY_EXTRA="-yn"
version_at_least "$DISTRIB_RELEASE" "18.04" || ADD_APT_REPOSITORY_EXTRA="-y"

APT_PREREQ=(
    apt-listchanges
    apt-transport-https
    aptitude
    coreutils
    curl
    debconf-utils
    debsums
    distro-info
    dmidecode
    language-selector-common
    ruby
    software-properties-common
    wget
)

APT_ESSENTIALS=(
    apparmor-utils
    bc
    build-essential
    cmake
    devscripts
    equivs
    jq
    p7zip-full
    pv
    stow
    vim

    # FILES
    attr
    file
    mediainfo

    # SHELLS
    # ksh: needed by some installers, e.g. Db2
    byobu
    ksh
    screen
    zsh

    # NETWORKING
    # net-tools: e.g. netstat
    # radvdump: dumps IPv6 router advertisements
    bridge-utils
    cifs-utils
    lftp
    net-tools
    ntp
    ntpdate
    openssh-server
    traceroute
    whois

    # MONITORING
    # atop: because you never know you need historical performance data--until you do
    atop
    auditd
    htop
    iftop
    iotop
    nethogs
    nload
    sysstat

    # HARDWARE
    hwinfo
    sysfsutils

    # KERNEL
    linux-crashdump
    linux-tools-generic

    # MISC
    $(! lk_is_ubuntu_lts || { lk_ubuntu_at_least 18.04 && printf '%s\n' "xxd" "radvdump" || printf '%s\n' "radvd"; })
)

is_virtual || APT_ESSENTIALS+=(
    dkms
    hddtemp
    lm-sensors
    powertop
    smartmontools
)

apt_register_repository mongodb-org-4.0 "https://www.mongodb.org/static/pgp/server-4.0.asc" "deb [arch=amd64] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" "origin repo.mongodb.org" "mongodb-org*"
apt_register_repository nodesource "https://deb.nodesource.com/gpgkey/nodesource.gpg.key" "deb https://deb.nodesource.com/node_8.x $DISTRIB_CODENAME main" "origin deb.nodesource.com" "nodejs"
apt_register_repository yarn "https://dl.yarnpkg.com/debian/pubkey.gpg" "deb https://dl.yarnpkg.com/debian/ stable main" "origin dl.yarnpkg.com" "yarn"
