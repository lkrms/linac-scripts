#!/bin/bash

function git_add_global_ignore() {

    local i IGNORE_FILE

    IGNORE_FILE="$(git config --global core.excludesFile)" || die "Error: Git global option core.excludesFile not defined"
    IGNORE_FILE="${IGNORE_FILE/#\~/$HOME}"

    [ -f "$IGNORE_FILE" ] || touch "$IGNORE_FILE" || die

    [ -f "$IGNORE_FILE" ] || die "Error: unable to create file $IGNORE_FILE"

    for i in "$@"; do

        if ! grep -q '^'"$(sed_escape_search "$i" N)"'$' "$IGNORE_FILE"; then

            echo "$i" >>"$IGNORE_FILE"

        fi

    done

}

# Usage: git_add_global_setting <setting.name> <value> [change if already set? (y/N)]
function git_add_global_setting() {

    if [ "${3:-N}" = "Y" ] || ! git config --global "$1" >/dev/null 2>&1; then

        local EXTRA=()

        if is_bool "$1"; then

            EXTRA+=("--bool")

        elif is_int "$1"; then

            EXTRA+=("--int")

        fi

        git config --global "${EXTRA[@]}" "$1" "$2"

    fi

}

function dev_apply_system_config() {

    if command_exists git; then

        if [ -e "$CONFIG_DIR/gitignore" ]; then

            # shellcheck disable=SC2088
            git_add_global_setting core.excludesFile "~/.gitignore"
            file_to_array "$CONFIG_DIR/gitignore" '^[[:space:]]*$' '^#'
            git_add_global_ignore "${FILE_TO_ARRAY[@]}"

        fi

        git_add_global_setting push.default simple

        local MERGETOOL=

        command_exists meld && MERGETOOL=meld || true

        if [ -n "$MERGETOOL" ]; then

            git_add_global_setting merge.guitool "$MERGETOOL" Y
            git_add_global_setting mergetool.prompt false

        fi

    fi

    if command_exists pip; then

        sudo -H pip install ps_mem

    fi

    if command_exists npm; then

        sudo npm install -g eslint

    fi

    if command_exists php && function_exists php_apply_developer_settings; then

        local INI_ROOT

        for INI_ROOT in /etc/php /usr/local/etc/php; do

            [ -d "$INI_ROOT" ] && php_apply_developer_settings "$INI_ROOT" || true

        done

    fi

    if command_exists php && ! command_exists composer && [ ! -e /usr/local/bin/composer ] && [ -d /usr/local ]; then

        {
            sudo mkdir -p /usr/local/bin &&
                "$ROOT_DIR/bash/composer-install.sh" &&
                sudo mv "composer.phar" /usr/local/bin/composer
        } || console_message "Unable to install Composer" "" "$BOLD" "$RED" >&2

    fi

    if command_exists composer; then

        composer global require "friendsofphp/php-cs-fixer"

    fi

    if command_exists sxhkd && command_exists systemctl; then

        mkdir -p "$HOME/.config/sxhkd"
        mkdir -p "$HOME/.local/bin"
        move_file_delete_link "$HOME/.config/sxhkd/sxhkdrc"
        move_file_delete_link "$HOME/.local/bin/sxhkd-do-map.py"
        ln -s "$ROOT_DIR/linux/sxhkd/sxhkdrc" "$HOME/.config/sxhkd/sxhkdrc"
        ln -s "$ROOT_DIR/linux/sxhkd/sxhkd-do-map.py" "$HOME/.local/bin/sxhkd-do-map.py"

        if systemctl --user list-units --full --all 2>/dev/null | grep -Eq '^sxhkd\.service[[:space:]]+'; then

            systemctl --user disable --now "sxhkd.service" 2>/dev/null || true

        fi

        systemctl --user enable --now --no-block "$ROOT_DIR/linux/sxhkd/sxhkd.service"

    fi

}

# Usage: php_do_apply_setting "/path/to/php.ini" "error_reporting" "E_ALL"
function php_do_apply_setting() {

    local INI_FILE SETTINGNAME SETTINGVALUE SEARCH REPLACE PREFIX=()

    INI_FILE="$1"
    SETTINGNAME="$2"
    SETTINGVALUE="$3"

    [ -w "$INI_FILE" ] || PREFIX+=(sudo)

    [ -f "${INI_FILE}.original" ] || "${PREFIX[@]}" cp -p "$INI_FILE" "${INI_FILE}.original" || die

    SEARCH="$(sed_escape_search "$SETTINGNAME")"
    REPLACE="$(sed_escape_replace "$SETTINGNAME = $SETTINGVALUE")"

    if grep -Eq '^\s*'"${SEARCH}"'\s*=' "$INI_FILE"; then

        # we have a defined setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*'"${SEARCH}"'\s*=.*$/'"${REPLACE}"'/' "$INI_FILE"

    elif grep -Eq '^\s*;\s*'"${SEARCH}"'\s*=' "$INI_FILE"; then

        # we have a commented-out setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*;\s*'"${SEARCH}"'\s*=.*$/'"${REPLACE}"'/' "$INI_FILE"

    else

        echo -e "\n$SETTINGNAME = $SETTINGVALUE" | "${PREFIX[@]}" tee -a "$INI_FILE" >/dev/null

    fi

}

# Usage: php_do_enable_extension "/path/to/php.ini" "extension" "/path/to/extension.so"
function php_do_enable_extension() {

    local INI_FILE SETTINGNAME SETTINGVALUE SEARCHNAME SEARCHVALUE REPLACE PREFIX=()

    INI_FILE="$1"
    SETTINGNAME="$2"
    SETTINGVALUE="$3"

    [ -w "$INI_FILE" ] || PREFIX+=(sudo)

    [ -f "${INI_FILE}.original" ] || "${PREFIX[@]}" cp -p "$INI_FILE" "${INI_FILE}.original" || die

    SEARCHNAME="$(sed_escape_search "$SETTINGNAME")"
    SEARCHVALUE="$(sed_escape_search "$SETTINGVALUE")"
    REPLACE="$(sed_escape_replace "$SETTINGNAME = $SETTINGVALUE")"

    # similar to php_do_apply_setting, but match on value too
    if grep -Eq '^\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$' "$INI_FILE"; then

        # we have a defined setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$/'"${REPLACE}"'/' "$INI_FILE"

    elif grep -Eq '^\s*;\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$' "$INI_FILE"; then

        # we have a commented-out setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*;\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$/'"${REPLACE}"'/' "$INI_FILE"

    else

        echo -e "\n$SETTINGNAME = $SETTINGVALUE" | "${PREFIX[@]}" tee -a "$INI_FILE" >/dev/null

    fi

}

# Usage: php_apply_setting "/etc/php" "error_reporting" "E_ALL"
function php_apply_setting() {

    local INI_ROOT INI_FILE

    INI_ROOT="$1"

    [ -d "$INI_ROOT" ] || die "Error: $INI_ROOT doesn't exist or isn't a directory"

    shift

    while IFS= read -rd $'\0' INI_FILE; do

        php_do_apply_setting "$INI_FILE" "$@"

    done < <(find "$INI_ROOT" -type f -name php.ini -print0 | sort -z)

}

# Usage: php_enable_extension "/etc/php" "extension" "/path/to/extension.so"
function php_enable_extension() {

    local INI_ROOT INI_FILE

    INI_ROOT="$1"

    [ -d "$INI_ROOT" ] || die "Error: $INI_ROOT doesn't exist or isn't a directory"

    shift

    while IFS= read -rd $'\0' INI_FILE; do

        php_do_enable_extension "$INI_FILE" "$@"

    done < <(find "$INI_ROOT" -type f -name php.ini -print0 | sort -z)

}

# Usage: php_apply_developer_settings "/etc/php"
function php_apply_developer_settings() {

    # display all the errors
    php_apply_setting "$1" error_reporting E_ALL
    php_apply_setting "$1" display_errors On
    php_apply_setting "$1" display_startup_errors On

    # enforce healthy limits
    php_apply_setting "$1" memory_limit 256M

    # enable debugging
    php_apply_setting "$1" xdebug.remote_enable 1
    php_apply_setting "$1" xdebug.remote_autostart 1

}
