#!/bin/bash
# shellcheck disable=SC1090,SC2068

. "$ROOT_DIR/bash/common-git"

# Usage: dev_install_packages [queue only? (y/N)] [name of 'already installed' array]
function dev_install_packages() {

    local QUEUE_ONLY="${1:-N}" UPDATE=N INSTALL_COMMAND ALREADY_INSTALLED_NAME="" SUDO_OR_NOT="N" \
        PIP_REQUIRED=() PIP3_REQUIRED=() NPM_REQUIRED=() PHP_INI_ROOT

    [ "$QUEUE_ONLY" = "N" ] && UPDATE="${3:-N}" || {
        ALREADY_INSTALLED_NAME="${2:-}"
        variable_exists PIP_INSTALL_QUEUE || PIP_INSTALL_QUEUE=()
        variable_exists PIP3_INSTALL_QUEUE || PIP3_INSTALL_QUEUE=()
        variable_exists NPM_INSTALL_QUEUE || NPM_INSTALL_QUEUE=()
    }

    dir_make_and_own "/usr/local/bin"

    # on macOS, global pip and npm management doesn't require sudo (courtesy of Homebrew)
    is_macos || SUDO_OR_NOT="Y"

    if command_exists pip; then

        file_to_array "$CONFIG_DIR/pip-packages"
        PIP_REQUIRED+=(${FILE_TO_ARRAY[@]+"${FILE_TO_ARRAY[@]}"})
        PIP_REQUIRED=($(array_filter_platform ${PIP_REQUIRED[@]+"${PIP_REQUIRED[@]}"} | sort | uniq))

        if [ "${#PIP_REQUIRED[@]}" -gt "0" ]; then

            if [ "$UPDATE" = "N" ]; then

                INSTALL_COMMAND="maybe_sudo pip install"
                [ "$QUEUE_ONLY" = "N" ] || INSTALL_COMMAND="PIP_INSTALL_QUEUE"

                install_or_queue "pip" "${PIP_REQUIRED[*]}" Y package packages "maybe_sudo pip list --format freeze 2>/dev/null | gnu_grep -Po '^[a-zA-Z0-9-]+'" "" "$INSTALL_COMMAND" "$ALREADY_INSTALLED_NAME"

            else

                eval "maybe_sudo pip install --upgrade --upgrade-strategy eager" "${PIP_REQUIRED[@]}"

            fi

        fi

    fi

    if command_exists pip3; then

        file_to_array "$CONFIG_DIR/pip3-packages"
        PIP3_REQUIRED+=(${FILE_TO_ARRAY[@]+"${FILE_TO_ARRAY[@]}"})
        PIP3_REQUIRED=($(array_filter_platform ${PIP3_REQUIRED[@]+"${PIP3_REQUIRED[@]}"} | sort | uniq))

        if [ "${#PIP3_REQUIRED[@]}" -gt "0" ]; then

            if [ "$UPDATE" = "N" ]; then

                INSTALL_COMMAND="maybe_sudo pip3 install"
                [ "$QUEUE_ONLY" = "N" ] || INSTALL_COMMAND="PIP3_INSTALL_QUEUE"

                install_or_queue "pip3" "${PIP3_REQUIRED[*]}" Y package packages "maybe_sudo pip3 list --format freeze 2>/dev/null | gnu_grep -Po '^[a-zA-Z0-9-]+'" "" "$INSTALL_COMMAND" "$ALREADY_INSTALLED_NAME"

            else

                eval "maybe_sudo pip3 install --upgrade --upgrade-strategy eager" "${PIP3_REQUIRED[@]}"

            fi

        fi

    fi

    if command_exists npm; then

        file_to_array "$CONFIG_DIR/npm-packages"
        NPM_REQUIRED+=(${FILE_TO_ARRAY[@]+"${FILE_TO_ARRAY[@]}"})
        NPM_REQUIRED=($(array_filter_platform ${NPM_REQUIRED[@]+"${NPM_REQUIRED[@]}"} | sort | uniq))

        if [ "${#NPM_REQUIRED[@]}" -gt "0" ]; then

            function npm_install() {

                local PACKAGE

                [ ! -e "/usr/bin/python" ] || maybe_sudo npm config -g set python /usr/bin/python

                for PACKAGE in "$@"; do

                    maybe_sudo npm "${NPM_COMMAND:-install}" -g "$PACKAGE" || true

                done

            }

            if [ "$UPDATE" = "N" ]; then

                INSTALL_COMMAND="npm_install"
                [ "$QUEUE_ONLY" = "N" ] || INSTALL_COMMAND="NPM_INSTALL_QUEUE"

                install_or_queue "npm" "${NPM_REQUIRED[*]}" Y package packages "maybe_sudo npm list -g --depth=0 --parseable | tail -n +2 | gnu_grep -Po '(?<=/)[^/]*$'" "" "$INSTALL_COMMAND" "$ALREADY_INSTALLED_NAME"

            else

                NPM_COMMAND=update npm_install "${NPM_REQUIRED[@]}"

            fi

        fi

    fi

    if command_exists php; then

        if [ "$UPDATE" = "N" ]; then

            for PHP_INI_ROOT in /etc/php /usr/local/etc/php; do

                [ -d "$PHP_INI_ROOT" ] && php_apply_developer_settings "$PHP_INI_ROOT" || true

            done

            [ -e "/usr/local/bin/composer" ] || {

                pushd "$TEMP_DIR" >/dev/null || die

                "$ROOT_DIR/bin/composer-install.sh" --quiet &&
                    mv "composer.phar" "/usr/local/bin/composer" ||
                    die

                popd >/dev/null

            }

        elif [ -e "/usr/local/bin/composer" ]; then

            /usr/local/bin/composer self-update || die

        fi

    fi

}

function dev_update_packages() {

    dev_install_packages N "" Y

}

function dev_apply_system_config() {

    install_gnu_commands awk date find grep ln nc sed sort stat tar

    if command_exists git; then

        file_to_array "$CONFIG_DIR/gitignore"

        if [ "${#FILE_TO_ARRAY[@]}" -gt "0" ]; then

            # shellcheck disable=SC2088
            git_add_global_setting core.excludesFile "~/.gitignore"
            git_add_global_ignore "${FILE_TO_ARRAY[@]}"

        fi

        git_add_global_setting push.default simple

        local MERGETOOL=

        command_exists meld && MERGETOOL=meld || true

        if [ -n "$MERGETOOL" ]; then

            git_add_global_setting diff.tool "$MERGETOOL" Y
            git_add_global_setting merge.tool "$MERGETOOL" Y
            git_add_global_setting mergetool.prompt false N --bool

        fi

    fi

    if is_linux; then

        safe_symlink "$ROOT_DIR/bin/md-scratchpad.sh" "$HOME/.local/bin/md-scratchpad.sh"
        safe_symlink "$ROOT_DIR/bin/pdf-combine.sh" "$HOME/.local/bin/pdf-combine.sh"

        if command_exists xrandr; then

            safe_symlink "$ROOT_DIR/bin/linux/xrandr-auto.sh" "$HOME/.local/bin/xrandr-auto.sh" &&
                safe_symlink "$ROOT_DIR/bin/linux/applications/xrandr-auto.sh.desktop" "$HOME/.config/autostart/xrandr-auto.sh.desktop" || true

        fi

        command_exists xkbcomp && safe_symlink "$ROOT_DIR/bin/linux/xkb-load.sh" "$HOME/.local/bin/xkb-load.sh" || true

        if command_exists google-chrome && safe_symlink "$ROOT_DIR/bin/chrome-app.sh" "$HOME/.local/bin/chrome-app.sh"; then

            safe_symlink "$ROOT_DIR/bin/linux/applications/harvest.desktop" "$HOME/.config/autostart/harvest.desktop" &&
                safe_symlink "$ROOT_DIR/bin/linux/applications/harvest.desktop" "$HOME/.local/share/applications/harvest.desktop" || true

        fi

        ! command_exists update-notifier || freedesktop_disable_autostart update-notifier

        safe_symlink "/usr/share/applications/caffeine-indicator.desktop" "$HOME/.config/autostart/caffeine-indicator.desktop" || true
        safe_symlink "/usr/share/applications/guake.desktop" "$HOME/.config/autostart/guake.desktop" || true
        safe_symlink "/usr/share/applications/stretchly.desktop" "$HOME/.config/autostart/stretchly.desktop" || true

        command_exists espanso && safe_symlink "$ROOT_DIR/bin/linux/applications/espanso.desktop" "$HOME/.config/autostart/espanso.desktop" &&
            safe_symlink "$ROOT_DIR/bin/linux/applications/espanso.desktop" "$HOME/.local/share/applications/espanso.desktop" &&
            espanso unregister 2>/dev/null || true
        command_exists evolution && safe_symlink "$ROOT_DIR/bin/linux/applications/evolution.desktop" "$HOME/.config/autostart/evolution.desktop" || true
        command_exists rescuetime && safe_symlink "$ROOT_DIR/bin/linux/applications/rescuetime.desktop" "$HOME/.config/autostart/rescuetime.desktop" || true
        command_exists teams-for-linux && safe_symlink "$ROOT_DIR/bin/linux/applications/teams-for-linux.desktop" "$HOME/.config/autostart/teams-for-linux.desktop" || true

        if command_exists sxhkd; then

            safe_symlink "$ROOT_DIR/linux/sxhkd/sxhkdrc" "$HOME/.config/sxhkd/sxhkdrc" N Y &&
                safe_symlink "$ROOT_DIR/linux/sxhkd/sxhkd-do-map.py" "$HOME/.local/bin/sxhkd-do-map.py" &&
                safe_symlink "$ROOT_DIR/bin/linux/applications/sxhkd.desktop" "$HOME/.config/autostart/sxhkd.desktop" || true

        fi

    fi

}

# Usage: dev_process_queue [name of 'installed' array]
function dev_process_queue() {

    local NPM_PACKAGE

    assert_variable_exists PIP_INSTALL_QUEUE
    assert_variable_exists PIP3_INSTALL_QUEUE
    assert_variable_exists NPM_INSTALL_QUEUE

    local JUST_INSTALLED="${1:-}" SUDO_OR_NOT="N"

    is_macos || SUDO_OR_NOT="Y"

    if [ "${#PIP_INSTALL_QUEUE[@]}" -gt "0" ]; then

        eval "maybe_sudo pip install" "${PIP_INSTALL_QUEUE[@]}" || die

        [ -z "$JUST_INSTALLED" ] || eval "$JUST_INSTALLED"'+=("${PIP_INSTALL_QUEUE[@]}")'
        PIP_INSTALL_QUEUE=()

    fi

    if [ "${#PIP3_INSTALL_QUEUE[@]}" -gt "0" ]; then

        eval "maybe_sudo pip3 install" "${PIP3_INSTALL_QUEUE[@]}" || die

        [ -z "$JUST_INSTALLED" ] || eval "$JUST_INSTALLED"'+=("${PIP3_INSTALL_QUEUE[@]}")'
        PIP3_INSTALL_QUEUE=()

    fi

    if [ "${#NPM_INSTALL_QUEUE[@]}" -gt "0" ]; then

        [ ! -e "/usr/bin/python" ] || maybe_sudo npm config -g set python /usr/bin/python

        for NPM_PACKAGE in "${NPM_REQUIRED[@]}"; do

            maybe_sudo npm install -g "$NPM_PACKAGE" &&
                { [ -z "$JUST_INSTALLED" ] || eval "$JUST_INSTALLED+=(\"\$NPM_PACKAGE\")"; } ||
                true

        done

        NPM_INSTALL_QUEUE=()

    fi

}

# Usage: php_do_apply_setting "/path/to/php.ini" "error_reporting" "E_ALL"
function php_do_apply_setting() {

    local INI_FILE SETTINGNAME SETTINGVALUE SEARCH REPLACE PREFIX=()

    INI_FILE="$1"
    SETTINGNAME="$2"
    SETTINGVALUE="$3"

    [ -w "$INI_FILE" ] || PREFIX+=(sudo)

    set +u

    [ -f "${INI_FILE}.original" ] || "${PREFIX[@]}" cp -p "$INI_FILE" "${INI_FILE}.original" || die

    SEARCH="$(sed_escape_search "$SETTINGNAME")"
    REPLACE="$(sed_escape_replace "$SETTINGNAME = $SETTINGVALUE")"

    if grep -Eq '^\s*'"${SEARCH}"'\s*=' "$INI_FILE"; then

        # we have a defined setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*'"${SEARCH}"'\s*=.*$/'"${REPLACE}"'/' "$INI_FILE" || die

    elif grep -Eq '^\s*;\s*'"${SEARCH}"'\s*=' "$INI_FILE"; then

        # we have a commented-out setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*;\s*'"${SEARCH}"'\s*=.*$/'"${REPLACE}"'/' "$INI_FILE" || die

    else

        echo -e "\n$SETTINGNAME = $SETTINGVALUE" | "${PREFIX[@]}" tee -a "$INI_FILE" >/dev/null || die

    fi

    set -u

}

# Usage: php_do_enable_extension "/path/to/php.ini" "extension" "/path/to/extension.so"
function php_do_enable_extension() {

    local INI_FILE SETTINGNAME SETTINGVALUE SEARCHNAME SEARCHVALUE REPLACE PREFIX=()

    INI_FILE="$1"
    SETTINGNAME="$2"
    SETTINGVALUE="$3"

    [ -w "$INI_FILE" ] || PREFIX+=(sudo)

    set +u

    [ -f "${INI_FILE}.original" ] || "${PREFIX[@]}" cp -p "$INI_FILE" "${INI_FILE}.original" || die

    SEARCHNAME="$(sed_escape_search "$SETTINGNAME")"
    SEARCHVALUE="$(sed_escape_search "$SETTINGVALUE")"
    REPLACE="$(sed_escape_replace "$SETTINGNAME = $SETTINGVALUE")"

    # similar to php_do_apply_setting, but match on value too
    if grep -Eq '^\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$' "$INI_FILE"; then

        # we have a defined setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$/'"${REPLACE}"'/' "$INI_FILE" || die

    elif grep -Eq '^\s*;\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$' "$INI_FILE"; then

        # we have a commented-out setting to replace
        "${PREFIX[@]}" sed -E "${SED_IN_PLACE_ARGS[@]}" 's/^\s*;\s*'"${SEARCHNAME}"'\s*=\s*'"${SEARCHVALUE}"'\s*$/'"${REPLACE}"'/' "$INI_FILE" || die

    else

        echo -e "\n$SETTINGNAME = $SETTINGVALUE" | "${PREFIX[@]}" tee -a "$INI_FILE" >/dev/null || die

    fi

    set -u

}

# Usage: php_apply_setting "/etc/php" "error_reporting" "E_ALL"
function php_apply_setting() {

    local INI_ROOT INI_FILE

    INI_ROOT="$1"

    [ -d "$INI_ROOT" ] || die "Error: $INI_ROOT doesn't exist or isn't a directory"

    shift

    while IFS= read -rd $'\0' INI_FILE; do

        php_do_apply_setting "$INI_FILE" "$@"

    done < <(find "$INI_ROOT" -type f -name php.ini -print0 | sort -z)

}

# Usage: php_enable_extension "/etc/php" "extension" "/path/to/extension.so"
function php_enable_extension() {

    local INI_ROOT INI_FILE

    INI_ROOT="$1"

    [ -d "$INI_ROOT" ] || die "Error: $INI_ROOT doesn't exist or isn't a directory"

    shift

    while IFS= read -rd $'\0' INI_FILE; do

        php_do_enable_extension "$INI_FILE" "$@"

    done < <(find "$INI_ROOT" -type f -name php.ini -print0 | sort -z)

}

# Usage: php_apply_developer_settings "/etc/php"
function php_apply_developer_settings() {

    # display all the errors
    php_apply_setting "$1" error_reporting E_ALL
    php_apply_setting "$1" display_errors Off
    php_apply_setting "$1" display_startup_errors On
    php_apply_setting "$1" error_log php_errors.log

    # enforce healthy limits
    php_apply_setting "$1" memory_limit 256M

    # enable debugging
    php_apply_setting "$1" xdebug.remote_enable 1
    php_apply_setting "$1" xdebug.remote_autostart 1

    if is_macos; then

        # support MariaDB via Homebrew
        php_apply_setting "$1" pdo_mysql.default_socket /tmp/mysql.sock
        php_apply_setting "$1" mysql.default_socket /tmp/mysql.sock
        php_apply_setting "$1" mysqli.default_socket /tmp/mysql.sock

    fi

}
